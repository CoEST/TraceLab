           Notification Event
           "public String m  _  Subscriber  Name = """";
              public String m  _  Event  ID = """";
              public String m  _  Message type = """";
              public String m  _  Event  Type = """";
              public int m  _  Number  Of  Requirements = 0  ;
              public String m  _  Event  Time = """";
              public String m  _  Left  String = """";  // String representation of left side
              public String m  _  Right  String = """";   // String representation of right side
              public Array  List m  _  Left  Side  ;
              public Array  List m  _  Right  Side  ;
              public String m  _  User = """";"
           "// constructor
              public Notification  _  Event  ()
              {
               m  _  Left  Side = new Array  List  ();
               m  _  Right  Side = new Array  List  ();
              }// end of class Notification  _  Event"
           "public Object clone  () throws Clone  Not  Supported  Exception
           {
          
            // create new object with the same type
            Notification  _  Event n  Evt = (  Notification  _  Event  ) super  . clone  ();
               n  Evt  . m  _  Left  Side = new Array  List  ();
               n  Evt  . m  _  Right  Side = new Array  List  ();
          
                  Iterator i = m  _  Left  Side  . iterator  ();
                  while  ( i  . has  Next  ())
                  {
                   Requirement requirement 1 = (  Requirement  )( i  . next  ());
                   Requirement requirement 2 = (  Requirement  ) requirement 1  . clone  ();
                   n  Evt  . m  _  Left  Side  . add  ( requirement 2  );
                  }// end of while
          
                  i = m  _  Right  Side  . iterator  ();
                  while  ( i  . has  Next  ())
                  {
                   Requirement requirement 1 = (  Requirement  )( i  . next  ());
                   Requirement requirement 2 = (  Requirement  ) requirement 1  . clone  ();
                   n  Evt  . m  _  Right  Side  . add  ( requirement 2  );
                  }// end of while
          
            return n  Evt  ;
          
           }// end of method cloe"
           "public void Parse  Event  (  String Text  Line  )
           {
          
            String msg = Text  Line  ;
          
            if  ( msg  . starts  With  (""  Re  -execute  "") )
            {
          
             Model  Driver md = new Model  Driver  ( msg );
             md  . init  ();
          
            //  To  Do  :
            // divert all the calls for speculative events to Performance Handler API
            // can parse the string for Re  -execute text and compare it with Hard coded Re  -execute
            // text and if true call performance modelAPI and let it handle the event
            //
          
            }
            System  . out  . println  ( """");
               System  . out  . println  ("" Line is "" + Text  Line );
            System  . out  . println  (""   "");
          
            //   String  Tokenizer Line  St  ; // Tokenizer for the line
          
                  int i  =0  ;
          
            String  Tokenizer Line  St = new String  Tokenizer  (  Text  Line   ""|"");
          
                  m  _  Subscriber  Name = Line  St  . next  Token  (); // subscriber name
                  System  . out  . println  ("" m  _  Subscriber  Name "" +  m  _  Subscriber  Name  );
          
                  m  _  Event  ID = Line  St  . next  Token  ();  // event  ID
            System  . out  . println  ("" m  _  Event  ID "" +  m  _  Event  ID  );
          
                  m  _  Message type = Line  St  . next  Token  ();  // message type  . Always ""  EVENT  "" here
            System  . out  . println  ("" m  _  Message type "" + m  _  Message type );
          
                  m  _  Event  Type = Line  St  . next  Token  ();  // event type
            System  . out  . println  (""  m  _  Event  Type "" +   m  _  Event  Type  );
          
                  m  _  Number  Of  Requirements = new Integer  (  Line  St  . next  Token  ()). int  Value  ();  // number of requirements
                  System  . out  . println  ("" m  _  Number  Of  Requirements "" +  m  _  Number  Of  Requirements  );
          
                  m  _  Event  Time = Line  St  . next  Token  ();  // event time
            System  . out  . println  ("" m  _  Event  Time "" + m  _  Event  Time  );
          
          
                  // Read requirements information according to event type
          
                  if ( m  _  Event  Type  . equals  (""  New  ""))
                  {
                   String str = Line  St  . next  Token  ();
                   m  _  Right  String +  = str  ;
                      Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Right  Side  . add  ( requirement );
                  }
          
                  if ( m  _  Event  Type  . equals  (""  Obsolete  ""))
                  {
                   String str = Line  St  . next  Token  ();
                   m  _  Left  String  +  =str  ;
                      Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Left  Side  . add  ( requirement );
                  }
          
                  if ( m  _  Event  Type  . equals  (""  Modify  ""))
                  {
                   String str = Line  St  . next  Token  ();
                   m  _  Left  String +  =str  ;
                   m  _  Right  String +  = str  ;
                      Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Left  Side  . add  ( requirement );
                      m  _  Right  Side  . add  ( requirement );
                  }
          
                  if ( m  _  Event  Type  . equals  (""  Replace  ""))
                  {
                   String str = Line  St  . next  Token  ();
                   m  _  Left  String +  = str  ;
                      Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Left  Side  . add  ( requirement );
          
                   str = Line  St  . next  Token  ();
                   m  _  Right  String +  = str  ;
                      requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Right  Side  . add  ( requirement );
                  }
          
                  if ( m  _  Event  Type  . equals  (""  Refine  ""))
                  {
                   String str = Line  St  . next  Token  ();
                   m  _  Left  String +  = str  ;
                      Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  ( str  );
                      m  _  Left  Side  . add  ( requirement )"
           "// Set the other members before calling this function
          
           public void Parse  Left  And  Right  Lists  (  String Left  Line   String Right  Line  )
           {
          
            m  _  Left  Side = new Array  List  ();
               m  _  Right  Side = new Array  List  ();
          
            if ( m  _  Event  Type  . equals  (""  New  ""))
            {
                   Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  (  Right  Line  );
                      m  _  Right  Side  . add  ( requirement );
                  }
          
            if ( m  _  Event  Type  . equals  (""  Obsolete  ""))
            {
                   Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  (  Left  Line  );
                      m  _  Left  Side  . add  ( requirement );
               }
          
               if ( m  _  Event  Type  . equals  (""  Modify  ""))
               {
                   Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  (  Left  Line  );
                      m  _  Left  Side  . add  ( requirement );
                   requirement= new Requirement  ();
                requirement .  Parse  Requirement  (  Right  Line  );
                   m  _  Right  Side  . add  ( requirement );
               }
          
                  if ( m  _  Event  Type  . equals  (""  Replace  ""))
                  {
                Requirement requirement= new Requirement  ();
                   requirement .  Parse  Requirement  (  Left  Line  );
                   m  _  Left  Side  . add  ( requirement );
                      requirement= new Requirement  ();
                   requirement .  Parse  Requirement  (  Right  Line  );
                      m  _  Right  Side  . add  ( requirement );
                  }
          
                  if ( m  _  Event  Type  . equals  (""  Refine  ""))
                  {
                   Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  (  Left  Line  );
                      m  _  Left  Side  . add  ( requirement );
                      String  Tokenizer Line  St = new String  Tokenizer  (  Right  Line   ""|"");
                      // requirements after refine
                      for ( int i  =0  ; i  < m  _  Number  Of  Requirements  ; i  ++)
                      {
                       String requirement Line = Line  St  . next  Token  ();
                       requirement= new Requirement  ();
                    requirement .  Parse  Requirement  (  requirement Line  );
                       m  _  Right  Side  . add  ( requirement );
                      }
            }
          
                  if ( m  _  Event  Type  . equals  (""  Decompose  ""))
                  {
                   Requirement requirement= new Requirement  ();
                      requirement .  Parse  Requirement  (  Left  Line  );
                      m  _  Left  Side  . add  ( requirement );
                      String  Tokenizer Line  St = new String  Tokenizer  (  Right  Line   ""|"");
                      // requirements after decompose
                      for ( int i  =0  ; i  < m  _  Number  Of  Requirements  ; i  ++)
                      {
                       String requirement Line = Line  St  . next  Token  ();
                       requirement= new Requirement  ();
                    requirement .  Parse  Requirement  (  requirement Line  );
                       m  _  Right  Side  . add  ( requirement );
                      }
            }
          
               if ( m  _  Event  Type  . equals  (""  Merge  ""))
               {
                Requirement requirement= new Requirement  ();
                   requirement .  Parse  Requirement  (  Right  Line  );
                   m  _  Right  Side  . add  ( req  );
                      String  Tokenizer Line  St = new String  Tokenizer  (  Left  Line   ""|"");
                      // requirements after decompose
                      for ( int i  =0  ; i  < m  _  Number  Of  Requirements  ; i  ++)
                      {
                       String Req  Line = Line  St  . next  Token  ();
                       req = new Requirement  ();
                    req  .  Parse  Requirement  (  Req  Line  );
                       m  _  Left  Side  . add  ( req  );
                      }
                  }
          
          
           }"
           "//  Comment Added by Amit Uchat
           //  This method displays the contents of two array list to console
              public void Display  Values  ()
              {
               System  . out  . println  (""\ r  \ n  Values of the event  :\ r  \ n  "");
               System  . out  . println  ("" m  _  Subscriber  Name  : ""+ m  _  Subscriber  Name  );
               System  . out  . println  ("" m  _  Event  ID  : ""+ m  _  Event  ID  );
               System  . out  . println  ("" m  _  Message type  : ""+ m  _  Message type  );
               System  . out  . println  ("" m  _  Event  Type  : ""+ m  _  Event  Type  );
               System  . out  . println  ("" m  _  Number  Of  Requirements  : ""+ m  _  Number  Of  Requirements  );
               System  . out  . println  ("" m  _  Event  Time  : ""+ m  _  Event  Time  );
          
               System  . out  . println  (""\ r  \ n  Left Side  :\ r  \ n  "");
          
               Requirement requirement= new Requirement  ();
          
                  Iterator i = m  _  Left  Side  . iterator  ();
                  while  ( i  . has  Next  ())
                  {
                   requirement= (  Requirement  )( i  . next  ());
                   System  . out  . println  ( requirement . m  _  Requirement  ID  +""  "");
                  }
          
               System  . out  . println  (""\ r  \ n  Right Side  :\ r  \ n  "");
          
                  i = m  _  Right  Side  . iterator  ();
                  while  ( i  . has  Next  ())
                  {
                   requirement= (  Requirement  )( i  . next  ());
                   System  . out  . println  ( requirement . m  _  Requirement  ID  +""  "");
                  }
          
                  System  . out  . println  (""\ r  \ n  End of Event  \ r  \ n  "");
                  System  . out  . println  (""  --------------  \ r  \ n  "");
              }"
