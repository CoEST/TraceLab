// TraceLab - Software Traceability Instrument to Facilitate and Empower Traceability Research
// Copyright (C) 2012-2013 CoEST - National Science Foundation MRI-R2 Grant # CNS: 0959924
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see<http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace TraceLab.Core.Components
{
    /// <summary>
    /// Data structure for holding the results of the component scanning process.
    /// </summary>
    class ComponentScanResults
    {
        public ComponentScanResults()
        {
            Components = new ObservableComponentDefinitionCollection();
            CompositeComponents = new ObservableComponentDefinitionCollection();
            OldGuidToNewGuidMap = new Dictionary<string, string>();
        }

        /// <summary>
        /// Gets the components.
        /// </summary>
        public ObservableComponentDefinitionCollection Components
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the composite components.
        /// </summary>
        /// <value>
        /// The composite components.
        /// </value>
        /// <remarks>
        /// CompositeComponents must be post-processed before they can be included with the general population AND because this
        /// post-processing must occur after all other components are loaded.  Because of this, composite components are returned separately.
        /// </remarks>
        public ObservableComponentDefinitionCollection CompositeComponents
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets or sets the requested files.
        /// </summary>
        /// <value>
        /// The requested files to be retrieve from the component library cache.
        /// </value>
        public List<string> RequestedFiles
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the new files loaded.
        /// </summary>
        /// <value>
        /// The new files loaded during scanning.
        /// </value>
        public List<FileDescriptor> NewFilesLoaded
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the errors.
        /// </summary>
        /// <value>
        /// The errors that ocurred during scanning.
        /// </value>
        public List<string> Errors
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the map from old component GUID to new their new GUID.
        /// If component still had old guid set, the map will keep this information, so that it can find the
        /// new autogenerated guid. 
        /// </summary>
        /// <value>
        /// The old GUID to new GUID map.
        /// </value>
        [Obsolete("Needed for backwards compability with old experiments that may refer to components by their old guids (not autogenerated guids).")]
        public Dictionary<string, string> OldGuidToNewGuidMap
        {
            get;
            set;
        }

        [Obsolete]
        public void AddRangeToOldGuidToNewGuidComponentsMap(Dictionary<string, string> map)
        {
            foreach (KeyValuePair<string, string> pair in map)
            {
                if (OldGuidToNewGuidMap.ContainsKey(pair.Key) == false)
                {
                    OldGuidToNewGuidMap.Add(pair.Key, pair.Value);
                }
            }
        }
    }
}
