package unisa.gps.etour.control.fuzzy;

import java.io. Serializable;
import java.util. Array List;
import java.util. Enumeration;
import java.util. Hashtable;
import java.util. List;

public class  Elenco Categorie implements  Serializable
{

	/**
	 *  Mantiene traccia dei dati di ogni categoria
	 */
	private static final long serial Version U I D =   L;
	private  Hashtable< String,  Categoria> categorie;// tabella hash che conserva
	// per ogni categoria una
	// classe  Categoria
	private  Hashtable< String, float[]> tot Termini;// tabella hash che conserva
	// i termini di tutte le
	// categorie
	float max Dist;// contiene il massimo delle distanze

	/**
	 *  Il costruttore inizializza le due tabelle hash che contengono le
	 * categorie e i termini di tutte le categorie
	 */
	public  Elenco Categorie()
	{
		categorie = new  Hashtable< String,  Categoria>();
		tot Termini = new  Hashtable< String, float[]>();
	}

	/**
	 *  Metodo di accesso all'attributo max Dist
	 * 
	 * @return la distanza massima di tutti i termini con tutte le categorie
	 */
	public float get Max Dist()
	{
		return max Dist;
	}

	/**
	 *  Metodo di accesso alla tabella delle categorie
	 * 
	 * @return categorie
	 */
	public  Hashtable< String,  Categoria> get All Categorie()
	{
		return categorie;
	}

	/**
	 *  Metodo di accesso alla tabella dei termini totali
	 * 
	 * @return tot Termini
	 */
	public  Hashtable< String, float[]> get Tot Termini()
	{
		return tot Termini;
	}

	/**
	 *  Metodo per accedere ad una categoria presente nella tabella delle
	 * categorie
	 * 
	 * @param p Nome Categoria
	 * @return oggetto  Categoria rappresentante la categoria di nome
	 *         p Nome Categoria
	 */
	public  Categoria get Categoria( String p Nome Categoria)
	{

		if (esiste Categoria(p Nome Categoria))// se esiste la categoria voluta
			return categorie.get(p Nome Categoria);// restituisce l'elemento
		// associato a p Nome Categoria

		return null;// altrimenti null
	}

	/**
	 *  Metodi di accesso ai valori di un determinato termine presente nella
	 * tabella delle categorie
	 * 
	 * @param p Termine
	 * @return  Restituisce i valori associati al termine p Termine
	 */
	public float[] get Termine( String p Termine)
	{
		if (esiste Termine(p Termine))// se il termine è presente nella tebella
			// dei termini totali
			return (float[]) tot Termini.get(p Termine);// restituisce il valore
		// associato

		return null;// null altrimenti
	}

	/**
	 *  Metodo che permette di aggiungere una categoria alla tabella delle
	 * categorie
	 * 
	 * @param p Nome Categoria nome categoria da aggiungere
	 * @param p Categoria oggetto associato alla categoria
	 * @return vero se l'operazione è stata effettuata con successo falso
	 *         altrimenti
	 */
	public boolean add Categoria( String p Nome Categoria,  Categoria p Categoria)
	{
		if (!esiste Categoria(p Nome Categoria))// se la categoria esiste
			return false;// restituisci falso

		categorie.put(p Nome Categoria, p Categoria);// altrimenti carica la
		// categoria nella tabella

		return true;// restituisci vero
	}

	/**
	 *  Modifica una categoria della tabella delle categorie
	 * 
	 * @param p Nome Categoria nome della categoria da modificare
	 * @param p Categoria oggetto da associare alla categoria
	 * @return vero se l'operazione è stata effettuata con successo falso
	 *         altrimenti
	 */
	public boolean set Categoria( String p Nome Categoria,  Categoria p Categoria)
	{
		if (esiste Categoria(p Nome Categoria))// se la categoria non esiste
			return false;// restituisci falso

		categorie.put(p Nome Categoria, p Categoria);// aggiorna la tabella delle
		// categorie 

		return true;// restituisci vero
	}

	/**
	 *  Metodo che permette di settare il valore di un termine nella tabelle dei
	 * termini totali
	 * 
	 * @param p Termine nome del termine
	 * @param p Val valore da associare al termine
	 */
	public void set Termine( String p Termine, float[] p Val)
	{

		tot Termini.put(p Termine, p Val);
	}

	/**
	 *  Metodo che permette di setta re il valore della distanza massima di un
	 * termine da una categoria
	 * 
	 * @param p Max Dist
	 */
	public void set Max Dist(float p Max Dist)
	{
		max Dist = p Max Dist;
	}

	/**
	 *  Metodo che permette di ricavare una collezione iterabile dei nomi di
	 * tutte le categorie presenti nella tabella  delle categorie
	 * 
	 * @return  Collezione iterabile di stringhe
	 */
	public  Iterable< String>  Categorie()
	{
		 List< String> to Return = new  Array List< String>();// crea una nuova lista
		for ( Enumeration< String> val = categorie.keys(); val.has More Elements();)// itera
		//  N
		// volte
		// dove
		//  N è
		// il
		// numero
		// di
		// categorie
		// presenti
		// nella
		// tabella
		{
			to Return.add(val.next Element());// aggiunge alla lista il nome di
			// una categoria
		}

		return to Return;
	}

	/**
	 *  Metodo ausiliare che permette di verificare l'esistenza di una categoria
	 * nella tabella delle categorie
	 * 
	 * @param p Key nome della categoria
	 * @return vero se la categoria esiste falso altrimenti
	 */
	public boolean esiste Categoria( String p Key)
	{
		try
		{
			categorie.get(p Key);// tenta di estrarra la categoria di nome p Key
								// dalla tabella delle categorie
			return true;// se l'operazione non genera eccezioni la categoria
						// esiste e restituisce true
		}
		catch ( Null Pointer Exception e)
		{
			return false;// false altrimenti
		}
	}

	/**
	 *  Metodo ausiliare che permette di verificare l'esistenza di una termine
	 * nella tabella dei termini totali
	 * 
	 * @param p Key termine
	 * @return vero se il termine esiste falso altrimenti
	 */
	public boolean esiste Termine( String p Key)
	{
		//vedi esiste Categoria
		try
		{
			if (tot Termini.get(p Key) != null)
				return true;
		}
		catch ( Null Pointer Exception e)
		{
			return false;
		}

		return false;
	}

}
