package unisa.gps.etour.gui.operatore agenzia ;

import java.awt.*;
import java.awt.event.*;
import java.io. File Not Found Exception;
import java.rmi. Remote Exception;
import java.rmi.registry. Locate Registry;
import java.rmi.registry. Registry;
import java.util. Array List;
import java.util. Hash Map;
import java.util. Iterator;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import javax.swing.border.*;
import unisa.gps.etour.gui.operatore agenzia . Banner Dialog;
import unisa.gps.etour.gui.operatore agenzia . Home;
import unisa.gps.etour.gui.operatore agenzia . Tag Panel;
import unisa.gps.etour.gui.operatore agenzia .tables. Banner Node;
import unisa.gps.etour.gui.operatore agenzia .tables. P R Node;
import unisa.gps.etour.bean. Bean Banner;
import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.control. Gestione Advertisement. I Gestione Advertisement Agenzia;
import unisa.gps.etour.control. Gestione Punti Di Ristoro. I Gestione Punti Di Ristoro Agenzia;
import unisa.gps.etour.control. Gestione Tag. I Gestione Tag Comune;
import unisa.gps.etour.gui. Desk Manager;
import unisa.gps.etour.gui. Help Manager;
import unisa.gps.etour.gui.operatore agenzia .tables. Banner Renderer;

/**
 *  Questa classe realizza l'interfaccia per la gestione dei banner pubblicitari
 * da parte dell'operatore dell'agenzia.
 * 
 * @author  Mario  Gallo
 * @version  . 
 * 
 * &#   ;      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I -
 *          University of  Salerno
 */
public class  Banner extends  J Internal Frame
{

	private  J Panel j Content Pane = null;
	private  J Panel right Panel = null;
	private  J Tool Bar banner Toolbar = null;
	private  J Button btn Inserisci = null;
	private  J Button btn Sostituisci = null;
	private  J Button btn Elimina = null;
	private  J Scroll Pane j Scroll Pane = null;
	private  J Panel help Panel = null;
	private  J Text Pane text Guida = null;
	private  Tag Panel panel Tag = null;
	private  J Button btn Ricerca = null;
	private  J Button btn Azzera = null;
	private  J Panel panel Search = null;
	private  J Text Field nome P R = null;
	private  J Tree tree Banner = null;
	private  J Desktop Pane j Desktop Pane;
	private  Help Manager banner Help;
	protected  Desk Manager desktop Manager;
	protected  I Gestione Punti Di Ristoro Agenzia gestione Punti Ristoro;
	protected  I Gestione Advertisement Agenzia gestione Banner;
	protected  I Gestione Tag Comune tag;

	/**
	 *  Questo &grave; il costruttore di default.
	 */
	public  Banner()
	{
		super(" Banner");
		resizable = true;
		closable = true;
		iconable = true;
		maximizable = true;
		set Preferred Size( Home. C H I L D_ S I Z E);
		frame Icon = new  Image Icon(get Class().get Resource(
				 Home. U R L_ I M A G E S + "banner .png"));

		//  Setting up dell'help manager per beni culturali.

		text Guida = new  J Text Pane();

		try
		{
			banner Help = new  Help Manager( Home. U R L_ H E L P + " Banner.txt",
					text Guida);
		}
		catch ( File Not Found Exception e)
		{
			text Guida
					.set Text("<html><b> Guida in linea non disponibile!</b></html>");
		}

		set Content Pane(get J Content Pane());
		add Internal Frame Listener(new  Internal Frame Adapter()
		{
			/*
			 *  All'inserimento del frame nel desktop pane recupera il
			 * collegamento al desktop pane.
			 */

			public void internal Frame Opened( Internal Frame Event p Event)
			{
				 J Internal Frame frame = p Event.get Internal Frame();
				j Desktop Pane = frame.get Desktop Pane();
				desktop Manager = ( Desk Manager) j Desktop Pane.get Desktop Manager();
				
				// Setting up degli oggetti remoti per la gestione dei beni culturali.
				try
				{
					 Registry reg =  Locate Registry.get Registry( Home. H O S T);
					gestione Banner = 
						( I Gestione Advertisement Agenzia)reg.lookup(" Gestione Beni Culturali Agenzia");
					tag = 
						( I Gestione Tag Comune)reg.lookup(" Gestione Tag Comune");
					gestione Punti Ristoro =
						( I Gestione Punti Di Ristoro Agenzia) reg.lookup(" Gestione Punti Di Ristoro Agenzia");
					
					// Caricamento dei dati.
					create Tree();
					carica Tags();
				}
				/*
				 *  Due eccezioni:  Remote Exception e  Not Bound Exception.  Il
				 * risultato è lo stesso.  La gestione non è operabile e la
				 * finestra dopo il messaggio di errore verrà chiusa.
				 */
				catch ( Exception ex)
				{
					 J Label errore = new  J Label(
							"<html><h > Impossibile comunicare con il server di e Tour.</h >"
									+ "<h ><u> La finestra di gestione richiesta verrà chiusa.</u></h >"
									+ "<p><b> Possibili  Cause:</b>"
									+ "<ul><li> Nessuna connessione alla rete.</li>"
									+ "<li> Server inattivo.</li>"
									+ "<li> Server intasato.</li></ul>"
									+ "<p> Si prega di riprovare in un secondo momento.</p>"
									+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
									+ "<p> Ci scusiamo per il disagio.</html>");
					 Image Icon err = new  Image Icon(get Class().get Resource(
							 Home. U R L_ I M A G E S + "error  .png"));
					 J Option Pane.show Message Dialog(j Desktop Pane, errore,
							" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
					frame.dispose();
				}
			}
		});
	}

	/**
	 *  Questo metodo inizializza il content pane.
	 * 
	 * @return javax.swing. J Panel - il content pane.
	 */
	private  J Panel get J Content Pane()
	{
		if (j Content Pane == null)
		{
			j Content Pane = new  J Panel();
			j Content Pane.set Layout(new  Border Layout());
			j Content Pane.add(get Right Panel(),  Border Layout. E A S T);
			j Content Pane.add(get Banner Toolbar(),  Border Layout. N O R T H);
			j Content Pane.add(get Tree Banner(),  Border Layout. C E N T E R);
		}
		return j Content Pane;
	}

	/**
	 *  Questo metodo inizializza la toolbar per le funzionalit� della gestione
	 * banner.
	 * 
	 * @return javax.swing. J Tool Bar - la toolbar.
	 */
	private  J Tool Bar get Banner Toolbar()
	{
		if (banner Toolbar == null)
		{
			banner Toolbar = new  J Tool Bar();
			banner Toolbar.set Layout(null);
			banner Toolbar.set Preferred Size(new  Dimension( ,   ));
			banner Toolbar.set Floatable(false);
			banner Toolbar.add(get Btn Inserisci());
			banner Toolbar.add(get Btn Sostituisci());
			banner Toolbar.add(get Btn Elimina());
		}
		return banner Toolbar;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'inserimento di un banner.
	 * 
	 * @return javax.swing. J Button - il pulsante per l'inserimento.
	 */
	private  J Button get Btn Inserisci()
	{
		if (btn Inserisci == null)
		{
			btn Inserisci = new  J Button();
			btn Inserisci.set Bounds( ,  ,    ,   );
			btn Inserisci.set Text("<html> Inserisci<br> Banner</html>");
			btn Inserisci.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Nuovo Banner  .png")));
			btn Inserisci.set Enabled(false);
			btn Inserisci.set Name("btn Inserisci");
			btn Inserisci.add Mouse Listener(banner Help);
			btn Inserisci.add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					 Default Mutable Tree Node selected Node = ( Default Mutable Tree Node) tree Banner
							.get Selection Path().get Last Path Component();
					open Dialog(selected Node);
				}

			});
		}
		return btn Inserisci;
	}

	/**
	 *  Questo metodo inizializza il pulsante per la modifica di un banner.
	 * 
	 * @return javax.swing. J Button - il pulsante per la modifica.
	 */
	private  J Button get Btn Sostituisci()
	{
		if (btn Sostituisci == null)
		{
			btn Sostituisci = new  J Button();
			btn Sostituisci.set Bounds(   ,  ,    ,   );
			btn Sostituisci.set Text("<html> Sostituisci<br> Banner</html>");
			btn Sostituisci.set Enabled(false);
			btn Sostituisci.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Sostituisci Banner  .png")));
			btn Sostituisci.set Name("btn Sostituisci");
			btn Sostituisci.add Mouse Listener(banner Help);
			btn Sostituisci.add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					 Default Mutable Tree Node selected Node = ( Default Mutable Tree Node) tree Banner
							.get Selection Path().get Last Path Component();
					open Dialog(selected Node);
				}

			});
		}
		return btn Sostituisci;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'eliminazione di un banner.
	 * 
	 * @return javax.swing. J Button - il pulsante per l'eliminazione.
	 */
	private  J Button get Btn Elimina()
	{
		if (btn Elimina == null)
		{
			btn Elimina = new  J Button();
			btn Elimina.set Bounds(   ,  ,    ,   );
			btn Elimina.set Text("<html> Elimina<br> Banner</html>");
			btn Elimina.set Enabled(false);
			btn Elimina.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Elimina Banner  .png")));
			btn Elimina.set Name("btn Elimina");
			btn Elimina.add Mouse Listener(banner Help);
			btn Elimina.add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					 J Panel root = new  J Panel(new  Border Layout());
					 J Label message = new  J Label(
							" Sei sicuro di voler eliminare il banner selezionato?");
					message.set Font(new  Font(" Dialog",  Font. B O L D,   ));
					 J Label avviso = new  J Label(
							" Il banner non potr� essere pi� recuperato.",
							 Swing Constants. C E N T E R);
					avviso.set Icon(new  Image Icon(get Class().get Resource(
							 Home. U R L_ I M A G E S + "warning  .png")));
					root.add(message,  Border Layout. N O R T H);
					root.add(avviso,  Border Layout. S O U T H);
					 String[] options = { " Elimina", " Annulla" };
					int scelta =  J Option Pane.show Internal Option Dialog(
							j Content Pane, root, " Conferma  Eliminazione",
							 J Option Pane. Y E S_ N O_ O P T I O N,
							 J Option Pane. Q U E S T I O N_ M E S S A G E, new  Image Icon(
									get Class().get Resource(
											 Home. U R L_ I M A G E S
													+ " Elimina Banner  .png")),
							options, options[ ]);
					if (scelta ==  J Option Pane. Y E S_ O P T I O N)
					{
						 Default Tree Model modello = ( Default Tree Model) tree Banner
								.get Model();
						modello
								.remove Node From Parent(( Default Mutable Tree Node) tree Banner
										.get Selection Path()
										.get Last Path Component());
						 J Label confirm = new  J Label(" Il banner selezionato"
								+ " è stato eliminato.");
						confirm.set Font(new  Font(" Dialog",  Font. B O L D,   ));
						 J Option Pane.show Internal Message Dialog(j Content Pane,
								confirm, " Banner eliminato!",
								 J Option Pane. O K_ O P T I O N, new  Image Icon(get Class()
										.get Resource(
												 Home. U R L_ I M A G E S + "ok  .png")));
					}

				}

			});
		}
		return btn Elimina;
	}

	/**
	 *  Questo metodo crea l'albero partendo dalle informazioni contenuti nei due
	 * arraylist di bean.
	 * 
	 * @param p P R  Array List< Bean Punto Di Ristoro> - l'array dei punti di ristoro.
	 * @param p Banner  Array List< Bean Banner> - l'array dei banner associati.
	 */
	private void create Tree()
	{
		//  Creazione della radice
		 Default Mutable Tree Node root = new  Default Mutable Tree Node("e Tour");

		//  Per ogni punto di ristoro dell'arraylist chiama il metodo ottieni
		// banner.
		try 
		{
		 Array List< Bean Punto Di Ristoro> p P R = 
			gestione Punti Ristoro.ottieni Punti Di Ristoro();
		for (int i =  ; i < p P R.size(); i++)
		{
			 Bean Punto Di Ristoro corrente = p P R.get(i);
			int id = corrente.get Id();
			 P R Node punto Di Ristoro = new  P R Node(corrente.get Nome(), id);
			 Hash Map< Bean Banner,  Image Icon> banner = gestione Banner.ottieni Banners Da I D(id);
			 Iterator< Bean Banner> itera Banner = banner.key Set().iterator();
			while (itera Banner.has Next())
			{
				 Bean Banner banner corrente  = itera Banner.next();
				 Banner Node nuovo Banner = new  Banner Node(banner
						.get(banner corrente ), banner corrente .get Id());
				punto Di Ristoro.add(nuovo Banner);
			}

			root.add(punto Di Ristoro);
		}
		}
		catch ( Remote Exception ex)
		{
			 J Label errore = new  J Label(
					"<html><h > Impossibile comunicare con il server di e Tour.</h >"
							+ "<h ><u> La lista dei banner non è stata caricata.</u></h >"
							+ "<p> Si prega di riprovare in un secondo momento.</p>"
							+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
							+ "<p> Ci scusiamo per il disagio.</html>");
			 Image Icon err = new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + "error  .png"));
			 J Option Pane.show Internal Message Dialog(this, errore,
					" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
		}
		finally 
		{
			tree Banner.set Model(new  Default Tree Model(root));
		}
		
	}

	/**
	 *  Questo metodo inizializza il tree dove vengono visualizzati il banner.
	 * 
	 * @return javax.swing. J Tree
	 */
	private  J Scroll Pane get Tree Banner()
	{

		if (tree Banner == null)
		{
			tree Banner = new  J Tree(new  Default Tree Model(new  Default Mutable Tree Node("etour")));
			tree Banner.set Scrolls On Expand(true);
			tree Banner.set Autoscrolls(true);
			tree Banner.set Scrolls On Expand(true);
			tree Banner.get Selection Model().set Selection Mode(
					 Tree Selection Model. S I N G L E_ T R E E_ S E L E C T I O N);
			tree Banner.set Name("tree Banner");
			tree Banner.add Mouse Listener(banner Help);
			tree Banner.set Root Visible(false);
			tree Banner.set Cell Renderer(new  Banner Renderer());
			tree Banner.add Tree Selection Listener(new  Tree Selection Listener()
			{
				public void value Changed( Tree Selection Event e)
				{
					 Default Mutable Tree Node node = ( Default Mutable Tree Node) tree Banner
							.get Last Selected Path Component();

					if (node instanceof  P R Node)
					{
						btn Inserisci.set Enabled(true);
						btn Elimina.set Enabled(false);
						btn Sostituisci.set Enabled(false);
					}
					else if (node instanceof  Banner Node)
					{
						btn Inserisci.set Enabled(false);
						btn Sostituisci.set Enabled(true);
						btn Elimina.set Enabled(true);
					}
					else
					{
						btn Inserisci.set Enabled(false);
						btn Sostituisci.set Enabled(false);
						btn Elimina.set Enabled(false);
					}

				}
			});

		}
		j Scroll Pane = new  J Scroll Pane(tree Banner);
		j Scroll Pane
				.set Vertical Scroll Bar Policy( J Scroll Pane. V E R T I C A L_ S C R O L L B A R_ A L W A Y S);
		return j Scroll Pane;
	}

	/**
	 *  Questo metodo inizializza il pannello laterale destro.
	 * 
	 * @return javax.swing. J Panel - il pannello destro.
	 */
	private  J Panel get Right Panel()
	{
		if (right Panel == null)
		{
			right Panel = new  J Panel();
			right Panel.set Layout(new  Grid Bag Layout());
			 Grid Bag Constraints g = new  Grid Bag Constraints();
			g.gridx =  ;
			g.gridy =  ;
			g.fill =  Grid Bag Constraints. B O T H;
			g.weighty =  . ;
			right Panel.add(get Search Panel(), g);
			g.gridy++;
			g.weighty =  . ;
			right Panel.add(get Help Panel(), g);
		}
		return right Panel;
	}

	/**
	 *  Questo metodo inizializza il pannello che contiene la guida in linea.
	 * 
	 * @return javax.swing. J Panel - il pannello per la guida.
	 */
	private  J Panel get Help Panel()
	{
		if (help Panel == null)
		{
			help Panel = new  J Panel();
			help Panel.set Layout(new  Border Layout());
			help Panel.set Border( Border Factory.create Titled Border( Border Factory
					.create Line Border(new  Color(  ,    ,    ),  ),
					" Guida in  Linea",  Titled Border. D E F A U L T_ J U S T I F I C A T I O N,
					 Titled Border. D E F A U L T_ P O S I T I O N, new  Font(" Dialog",
							 Font. B O L D,   ), new  Color( ,    ,    )));
			help Panel.set Preferred Size(new  Dimension(   ,   ));
			text Guida.set Preferred Size(new  Dimension( ,   ));
			text Guida.set Opaque(false);
			text Guida.set Content Type("text/html");
			text Guida.set Text("<html> Muovi il puntatore del mouse su un controllo " +
				"d'interesse per visualizzare la guida sensibile al contesto.</html>");
			text Guida.set Editable(false);
			text Guida.set Name("text Guida");
			text Guida.add Mouse Listener(banner Help);
			help Panel.add(text Guida,  Border Layout. C E N T E R);
		}
		return help Panel;
	}

	/**
	 *  Questo metodo inizializza il pannello per la ricerca dei punti di
	 * ristoro.
	 * 
	 * @return javax.swing. J Panel - il pannello per la ricerca.
	 */
	private  J Panel get Search Panel()
	{
		if (panel Search == null)
		{
			panel Search = new  J Panel();
			panel Search.set Layout(new  Grid Bag Layout());
			panel Search.set Border( Border Factory.create Titled Border(
					 Border Factory.create Line Border(new  Color(  ,    ,    ),  ),
					" Ricerca  Punto di  Ristoro",
					 Titled Border. D E F A U L T_ J U S T I F I C A T I O N,
					 Titled Border. D E F A U L T_ P O S I T I O N, new  Font(" Dialog",
							 Font. B O L D,   ), new  Color( ,    ,    )));
			 Grid Bag Constraints g = new  Grid Bag Constraints();
			g.anchor =  Grid Bag Constraints. C E N T E R;
			g.gridx =  ;
			g.gridy =  ;
			g.gridwidth =  ;
			g.insets = new  Insets( ,  ,  ,  );
			panel Search.add(new  J Label(" Nome  Punto di  Ristoro:"), g);
			nome P R = new  J Text Field();
			nome P R.set Name("nome P R");
			nome P R.add Mouse Listener(banner Help);
			nome P R.set Columns(  );
			g.insets = new  Insets( ,  ,   ,  );
			g.gridy++;
			panel Search.add(nome P R, g);
			g.insets = new  Insets( ,  ,  ,  );
			g.gridy++;
			panel Search.add(new  J Label(" Seleziona tag di ricerca:"), g);
			g.weighty =  . ;
			g.insets = new  Insets( ,  ,   ,  );
			g.gridy++;
			panel Tag = new  Tag Panel();
			panel Tag.set Name("pannello Tag");
			panel Tag.add Mouse Listener(banner Help);
			panel Tag.set Preferred Size(new  Dimension(   ,   ));
			g.fill =  Grid Bag Constraints. V E R T I C A L;
			panel Search.add(panel Tag, g);
			g.fill =  Grid Bag Constraints. N O N E;
			g.insets = new  Insets( ,  ,  ,  );
			g.weighty =  ;
			g.gridy++;
			g.gridwidth =  ;
			panel Search.add(get Btn Ricerca(), g);
			g.gridx++;
			panel Search.add(get Btn Azzera(), g);
		}
		return panel Search;
	}

	/**
	 *  Questo metodo inizializza il pulsante per la sottomissione della form di
	 * ricerca di un punto di ristoro.
	 * 
	 * @return javax.swing. J Button - il pulsante di ricerca.
	 */
	private  J Button get Btn Ricerca()
	{
		if (btn Ricerca == null)
		{
			btn Ricerca = new  J Button();
			btn Ricerca.set Preferred Size(new  Dimension(  ,   ));
			btn Ricerca.set Text(" Ricerca");
			btn Ricerca.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Ricerca  .png")));
			btn Ricerca.set Name("btn Ricerca");
			btn Ricerca.add Mouse Listener(banner Help);
		}
		return btn Ricerca;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'azzeramento dei campi della
	 * form di ricerca di un punto di ristoro.
	 * 
	 * @return javax.swing. J Button - il pulsante azzera.
	 */
	private  J Button get Btn Azzera()
	{
		if (btn Azzera == null)
		{
			btn Azzera = new  J Button();
			btn Azzera.set Preferred Size(new  Dimension(  ,   ));
			btn Azzera.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Azzera  .png")));
			btn Azzera.set Text(" Azzera");
			btn Azzera.set Horizontal Text Position( Swing Constants. L E A D I N G);
			btn Azzera.set Name("btn Azzera");
			btn Azzera.add Mouse Listener(banner Help);
			btn Azzera.add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					panel Tag.azzera();
					nome P R.set Text("");
				}

			});
		}
		return btn Azzera;
	}
	
	/**
	 *  Questo metodo apre la dialog box per l'inserimento di un nuovo 
	 * banner o per la modifica di un banner selezionato.
	 *
	 * @param p Selected Node  Default Mutable Tree Node - il nodo selezionato.
	 */
	private void open Dialog( Default Mutable Tree Node p Selected Node)
	{
		//  Questa classe intercetta gli eventi del mouse e quindi
		// rende il frame sottostante bloccato.
		class  Modal Adapter extends  Internal Frame Adapter
		{
			 Component glass;

			public  Modal Adapter( Component p Glass Component)
			{
				this.glass = p Glass Component;

				 Mouse Input Adapter adapter = new  Mouse Input Adapter()
				{
				};
				p Glass Component.add Mouse Listener(adapter);
				p Glass Component.add Mouse Motion Listener(adapter);
			}

			public void internal Frame Closed( Internal Frame Event e)
			{
				glass.set Visible(false);
			}
		}

		//  Costruzione della dialog
		 J Option Pane option Pane = new  J Option Pane();
		final  J Internal Frame modal = option Pane.create Internal Frame(
				j Desktop Pane, "");
		final  J Panel glass = new  J Panel();
		final  Banner Dialog dialogo = new  Banner Dialog();
		option Pane.set Message(dialogo);
		option Pane.set Message Type( J Option Pane. I N F O R M A T I O N_ M E S S A G E);
		 J Button[] options = new  J Button[ ];
		options[ ] = new  J Button();
		options[ ] = new  J Button(" Annulla");
		options[ ].set Icon(new  Image Icon(get Class().get Resource(
				 Home. U R L_ I M A G E S + " Salva  .png")));
		options[ ].set Icon(new  Image Icon(get Class().get Resource(
				 Home. U R L_ I M A G E S + " Annulla  .png")));
		option Pane.set Options(options);
		options[ ].add Action Listener(new  Action Listener()
		{
			public void action Performed( Action Event arg )
			{
				modal.set Visible(false);
				glass.set Visible(false);
			}
		});

		glass.set Opaque(false);
		modal.add Internal Frame Listener(new  Modal Adapter(glass));
		glass.add(modal);
		set Glass Pane(glass);
		modal.set Location(this.get Width() /  , this.get Height() /  );
		glass.set Visible(true);
		modal.set Visible(true);
		if (p Selected Node instanceof  Banner Node) //  Sostituzione
		{
			final  Banner Node banner = ( Banner Node) p Selected Node;
			options[ ].set Text(" Sostituisci");
			options[ ].add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					 Default Tree Model model = ( Default Tree Model) tree Banner
							.get Model();
					banner.set Banner(dialogo.get Selected Banner());
					model.node Changed(banner);
					glass.set Visible(false);
					modal.set Visible(false);
				}

			});

			option Pane.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Sostituisci Banner  .png")));
			modal.set Title(" Sostituisci banner per il punto di ristoro "
					+ (( P R Node) p Selected Node.get Parent()).get User Object()
							.to String());
		}
		else if (p Selected Node instanceof  P R Node) //  Inserimento
		{
			final  P R Node pr = ( P R Node) p Selected Node;
			options[ ].set Text(" Salva");
			options[ ].add Action Listener(new  Action Listener()
			{

				public void action Performed( Action Event arg )
				{
					 Default Tree Model model = ( Default Tree Model) tree Banner
							.get Model();
					 Banner Node nuovo = new  Banner Node(dialogo
							.get Selected Banner(), pr.get I D());
					model.insert Node Into(nuovo, pr,  );
					glass.set Visible(false);
					modal.set Visible(false);
				}

			});
			option Pane.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + "nuovo Banner  .png")));
			modal.set Title(" Inserisci banner per il punto di ristoro "
					+ p Selected Node.get User Object().to String());
		}

	}
	
	private void carica Tags()
	{
		 Array List< Bean Tag> bean Tags = null;
		try
		{
			bean Tags = tag.ottieni Tags();
		}
		//  In caso di errore visualizza un messaggio di errore.
		catch ( Remote Exception e)
		{
		}
		finally 
		{
			for ( Bean Tag b: bean Tags)
			{
				panel Tag.insert Tag(b);
			}
			panel Tag.repaint();	
		}
		
	}
}
