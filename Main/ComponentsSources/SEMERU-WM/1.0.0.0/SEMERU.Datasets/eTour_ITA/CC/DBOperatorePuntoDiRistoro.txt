package unisa.gps.etour.repository;

import java.sql. Connection;
import java.sql. Result Set;
import java.sql. S Q L Exception;
import java.sql. Statement;

import unisa.gps.etour.bean. Bean Operatore Punto Di Ristoro;

/**
 *  Classe che implementa l'interfaccia  Operatore  Punto  Di  Ristoro
 * 
 * @author  Martone  Giuseppe
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */
public class  D B Operatore Punto Di Ristoro implements  I D B Operatore Punto Di Ristoro
{
	//  Costruttore vuoto
	public  D B Operatore Punto Di Ristoro()
	{

	}

	public boolean cancella Operatore Punto Di Ristoro(int p Id Operatore)
			throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di cancellazione
			 String query = " D E L E T E  F R O M operatore punto di ristoro oro  W H E R E  Id ="
					+ p Id Operatore;
			//  Si esegue la query di  Cancellazione
			int i = stat.execute Update(query);
			//  Si restituisce il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public boolean inserisci Operatore Punto Di Ristoro(
			 Bean Operatore Punto Di Ristoro p Operatore) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set unico = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'inserimento
			 String query = " I N S E R T  I N T O operatore punto di ristoro oro( Nome, Cognome,"
					+ " Username, Password, Email, Id Punto Di Ristoro)  V A L U E S ('"
					+ p Operatore.get Nome() + "','" + p Operatore.get Cognome()
					+ "','" + p Operatore.get Username() + "','"
					+ p Operatore.get Password() + "','" + p Operatore.get Email()
					+ "'," + p Operatore.get Id Punto Di Ristoro() + ")";
			//  Query per il controllo sull' Id del  Punto Di Ristoro in quanto
			// l'associazione è   a   tra  O P P R e  P R
			 String unicita = " S E L E C T  Id Punto Di Ristoro  F R O M operatore punto di ristoro oro  W H E R E  Id Punto Di Ristoro = "
					+ p Operatore.get Id Punto Di Ristoro();
			//  Eseguo la query per il controllo
			unico = stat.execute Query(unicita);
			int j =  ;
			//  Controllo se ci sono tuple
			while (unico.next())
				j++;
			//  Se è vuoto
			if (j ==  )
			{
				//  Si esegue la query di  Inserimento
				int i = stat.execute Update(query);
				//  Si ritorna il backup
				 System.out.println(" Ho inserito  L' Operatore  P R");
				return (i ==  );
			}
			//  Altrimenti già esiste
			else
			{
				 System.out.println(" Operatore  P R già esistente per il  P R");
				return false;
			}
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
			if (unico != null)
			{
				unico.close();
			}
		}
	}

	public boolean modifica Operatore Punto Di Ristoro(
			 Bean Operatore Punto Di Ristoro p Operatore) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di modifica
			 String query = " U P D A T E operatore punto di ristoro oro   S E T " + "  Nome = '"
					+ p Operatore.get Nome() + "',  Cognome = '"
					+ p Operatore.get Cognome() + "',  Password = '"
					+ p Operatore.get Password() + "',  Email = '"
					+ p Operatore.get Email() + "'  W H E R E  Id Punto Di Ristoro = "
					+ p Operatore.get Id Punto Di Ristoro();
			//  Si esegue la query di  Modifica
			int i = stat.execute Update(query);
			//  Si ritorna il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public  Bean Operatore Punto Di Ristoro ottieni Operatore Punto Di Ristoro(
			int p Id Operatore) throws  S Q L Exception
	{

		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set result = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'estrazione dell'operatore punto di ristoro richiesto
			 String query = " S E L E C T *  F R O M operatore punto di ristoro oro  W H E R E  Id = "
					+ p Id Operatore;
			//  Viene eseguita la query
			result = stat.execute Query(query);
			//  Ottengo il bean dell' Operatore punto di ristoro passando l'id
			 Bean Operatore Punto Di Ristoro bean Temp = null;
			if (result.next())
			{
				//  Construisco il  Bean O P R
				bean Temp = new  Bean Operatore Punto Di Ristoro(result.get Int(" Id"),
						result.get String(" Nome"), result.get String(" Cognome"),
						result.get String(" Username"), result
								.get String(" Password"), result
								.get String(" Email"), result
								.get Int(" Id Punto Di Ristoro"));
			}
			return bean Temp;
		}
		//  Eccezione se c'è un errore
		catch ( Exception e)
		{
			throw new  S Q L Exception();
		}
		//  Viene eseguito sempre e si occupa di chiudere il  Result, lo  Statement
		// e la  Connessione
		finally
		{
			if (result != null)
			{
				result.close();
			}
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

}
