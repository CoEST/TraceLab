package unisa.gps.etour.repository;

import java.sql. S Q L Exception;
import java.util. Array List;

import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.util. Punto  D;


/**
 *  Interfaccia per la gestione di  Punto di ristoro nel database
 * 
 * @author  Martone  Giuseppe
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */
public interface  I D B Punto Di Ristoro
{
	/**
	 *  Aggiunge un punto di ristoro
	 * 
	 * @param p Punto Di Ristoro  Punto di ristoro da aggiungere
	 * @throws  S Q L Exception
	 */
	public boolean inserisci Punto Di Ristoro( Bean Punto Di Ristoro p Punto Di Ristoro)
			throws  S Q L Exception;

	/**
	 *  Modifica un punto di ristoro
	 * 
	 * @param p Punto Di Ristoro  Punto di ristoro da modificare
	 * @throws  S Q L Exception
	 * @return  True se e' stata modificata false altrimenti
	 */
	public boolean modifica Punto Di Ristoro( Bean Punto Di Ristoro p Punto Di Ristoro)
			throws  S Q L Exception;

	/**
	 *  Elimina un punto di ristoro
	 * 
	 * @param p Id Punto Di Ristoro  Identificativo  Punto di ristoro da eliminare
	 * @throws  S Q L Exception
	 * @return  True se e' stata cancellata false altrimenti
	 */
	public boolean cancella Punto Di Ristoro(int p Id Punto Di Ristoro)
			throws  S Q L Exception;

	/**
	 *  Restituisce i dati di un punto di ristoro con l'id dato come argomento
	 * 
	 * @param p Id  Identificativo del punto di ristoro
	 * @throws  S Q L Exception
	 * @return  Punto di ristoro
	 */
	public  Bean Punto Di Ristoro ottieni Punto Di Ristoro(int p Id)
			throws  S Q L Exception;

	/**
	 *  Ricerca avanzata.  Restituisce la lista di punti di ristoro che hanno nel
	 * nome o nella descrizione la stringa data in input, ordinati secondo le
	 * preferenze del turista, filtrati secondo i tag e secondo la distanza
	 * massima.  La lista restituita contiene solo il numero dei punti di ristoro dati in input. 
	 *  Per scorrere la reale lista, che potrebbe contenere piu' elementi, si 
	 * utilizza il parametro num Pagina.
	 * 
	 * @param p Id Turista  Id del turista che ha effettuato la ricerca
	 * @param p Keyword  Stringa che contiene la parola chiave da ricercare nel
	 *            nome o nella descrizione del punto di ristoro
	 * @param p Tags lista di tag utilizzati come filtro per la ricerca. il
	 *            numero massimo di tag da inserire non deve superare le cinque
	 *            unita'.  In caso si superi questo numero gli altri tag in
	 *            eccesso verrano ignorati.
	 * @param p Numero Pagina  Il numero di pagina che si vuole visualizzare.  O per
	 *            la  � pagina (i primi    risultati),   per la  � pagina (i
	 *            risultati dal    al   ) ecc... *
	 * @param p Posizione  Posizione dell'utente che ha effettuato la ricerca
	 * @param int p Numero Elementi Per Pagina  Numero di elementi da restituire
	 * @param p Distanza Massima  Distanza massima dall'utente al punto di ristoro
	 *            da ricercare
	 * @throws  S Q L Exception
	 * @return lista contenete dieci punti di ristoro
	 */
	public  Array List< Bean Punto Di Ristoro> ricerca Avanzata(int p Id Turista,
			 String p Keyword,  Array List< Bean Tag> p Tags, int p Numero Pagina,int p Numero Elementi Per Pagina,
			 Punto  D p Posizione, double p Distanza Massima) throws  S Q L Exception;

	/**
	 *  Metodo per ottenere il numero di elementi per una ricerca avanzata.
	 * 
	 * @see ricerca Avanzata()
	 * @param p Id Turista  Id del turista che ha effettuato la ricerca
	 * @param p Keyword  Stringa che contiene la parola chiave da ricercare nel
	 *            nome o nella descrizione del punto di ristoro
	 * @param p Tags lista di tag utilizzati come filtro per la ricerca. il
	 *            numero massimo di tag da inserire non deve superare le cinque
	 *            unita'.  In caso si superi questo numero gli altri tag in
	 *            eccesso verrano ignorati. *
	 * @param p Posizione  Posizione dell'utente che ha effettuato la ricerca
	 * @param p Distanza Massima  Distanza massima dall'utente al punto di ristoro
	 *            da ricercare
	 * @throws  S Q L Exception
	 * @return numero di pagine totali.
	 */
	public int ottieni Numero Elementi Ricerca Avanzata(int p Id Turista,
			 String p Keyword,  Array List< Bean Tag> p Tags,  Punto  D p Posizione,
			double p Distanza Massima) throws  S Q L Exception;

	/**
	 *  Ricerca.  Restituisce la lista di punti di ristoro che hanno nel nome o
	 * nella descrizione la stringa data in input, filtrati secondo i tag e
	 * secondo la distanza massima.  La lista restituita contiene il numero dei
	 * punti di ristoro dati in input.  Per scorrere la reale lista, che
	 * potrebbe contenere piu' elementi, si utilizza il parametro
	 * num Pagina.
	 * 
	 * @param p Keyword  Stringa che contiene la parola chiave da ricercare nel
	 *            nome o nella descrizione del punto di ristoro
	 * @param p Tags lista di tag utilizzati come filtro per la ricerca. il
	 *            numero massimo di tag da inserire non deve superare le cinque
	 *            unita'.  In caso si superi questo numero gli altri tag in
	 *            eccesso verrano ignorati.
	 * @param p Numero Pagina  Il numero di pagina che si vuole visualizzare.  O per
	 *            la  � pagina (i primi    risultati),   per la  � pagina (i
	 *            risultati dal    al   ) ecc... *
	 * @param p Posizione  Posizione dell'utente che ha effettuato la ricerca
	 * @param p Distanza Massima  Distanza massima dall'utente al punto di ristoro
	 * @param int p Numero Elementi Per Pagina  Numero di elementi da restituire
	 * @throws  S Q L Exception
	 * @return lista contenete dieci punti di ristoro
	 */
	public  Array List< Bean Punto Di Ristoro> ricerca( String p Keyword,
			 Array List< Bean Tag> p Tags, int p Numero Pagina,int p Numero Elementi Per Pagina,  Punto  D p Posizione,
			double p Distanza Massima) throws  S Q L Exception;

	/**
	 *  Metodo per ottenere il numero elementi per una ricerca avanzata.
	 * 
	 * @see ricerca()
	 * @param p Username Turista username del turista che ha effettuato la ricerca
	 * @param p Keyword  Stringa che contiene la parola chiave da ricercare nel
	 *            nome o nella descrizione del punto di ristoro
	 * @param p Tags lista di tag utilizzati come filtro per la ricerca.  Il
	 *            numero massimo di tag da inserire non deve superare le cinque
	 *            unita'.  In caso si superi questo numero gli altri tag in
	 *            eccesso verrano ignorati.
	 * @param p Posizione  Posizione dell'utente che ha effettuato la ricerca
	 * @param p Distanza Massima  Distanza massima dall'utente al punto di ristoro
	 *            da ricercare
	 * @throws  S Q L Exception
	 * @return numero di pagine totali.
	 */
	public int ottieni Numero Elementi Ricerca( String p Keyword,
			 Array List< Bean Tag> p Tags,  Punto  D p Posizione,
			double p Distanza Massima) throws  S Q L Exception;

	/**
	 *  Restituisce la lista di tutti i punti di ristoro
	 * 
	 * @throws  S Q L Exception
	 * @return  Lista di tutti i punti di ristoro
	 */
	public  Array List< Bean Punto Di Ristoro> ottieni Lista P R() throws  S Q L Exception;
}
