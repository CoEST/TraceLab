package unisa.gps.etour.util;

/**
 *  Bean che contiene le coordinate di un punto sulla superfice della terra e e
 * che ne realizza il calcolo della distanza dal sistema.  I valori delle
 * coordinate devono essere rappresentati in radianti e devono rientrare in un
 * range prefissato: da   a - Pi greco /   per la latitudine a  Sud dell'equatore
 * da   a + Pi greco /   per la latitudine a  Nord dell'equatore da   a - Pi greco /
 *   per la longitudine a  Ovest del meridiano di  Greenwitch da   a + Pi greco /  
 * per la longitudine a  Est del meridiano di  Greenwitch
 * 
 * @author  Miranda  Mauro
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */

public class  Punto  D
{
	//  Raggio della terra
	final double  E A R T H_ R A D I U S =     . ;
	private double latitudine, longitudine, altitudine;

	public  Punto  D()
	{
		latitudine = longitudine = altitudine =  ;
	}

	public  Punto  D(double p Latitudine, double p Longitudine, double p Altitudine)
	{
		latitudine = p Latitudine;
		longitudine = p Longitudine;
		altitudine = p Altitudine;
	}

	/**
	 *  Restituisce la latitudine
	 * 
	 * @return
	 */
	public double get Latitudine()
	{
		return latitudine;
	}

	/**
	 *  Imposta la latitudine
	 * 
	 * @param p Latitudine
	 */
	public void set Latitudine(double p Latitudine)
	{
		this.latitudine = p Latitudine;
	}

	/**
	 *  Restituisce la longitudine
	 * 
	 * @return
	 */
	public double get Longitudine()
	{
		return longitudine;
	}

	/**
	 *  Imposta la longitudine
	 * 
	 * @param p Longitudine
	 */
	public void set Longitudine(double p Longitudine)
	{
		this.longitudine = p Longitudine;
	}

	/**
	 *  Restituisce l'altitudine
	 * 
	 * @return
	 */
	public double get Altitudine()
	{
		return altitudine;
	}

	/**
	 *  Imposta l'altitudine
	 * 
	 * @param p Altitudine
	 */
	public void set Altitudine(double p Altitudine)
	{
		this.altitudine = p Altitudine;
	}

	/**
	 *  Calcola la distanza tra il punto e un altro punto dato come argomento
	 * 
	 * @param p
	 * @return
	 */
	public double distanza( Punto  D p)
	{
		double differenza Longitudine = this.longitudine - p.longitudine;
		double p  =  Math.pow( Math.cos(p.latitudine)
				*  Math.sin(differenza Longitudine),  );
		double p  =  Math.pow( Math.cos(latitudine) *  Math.sin(p.latitudine)
				-  Math.sin(latitudine) *  Math.cos(p.latitudine)
				*  Math.cos(differenza Longitudine),  );
		double p  =  Math.sin(latitudine) *  Math.sin(p.latitudine)
				+  Math.cos(latitudine) *  Math.cos(p.latitudine)
				*  Math.cos(differenza Longitudine);
		return ( Math.atan( Math.sqrt(p  + p ) / p ) *  E A R T H_ R A D I U S);
	}

	/**
	 *  Metodo che crea un punto  d a partire da coordinate misurate in gradi.  Il
	 * punto  d invece rappresenta le coordinate in radianti
	 * 
	 * @param p Latitudine  Latitudine in gradi
	 * @param p Longitudine  Longitudine in gradi *
	 * @param p Altitudine
	 * @return  Punto  D con le coordinate in radianti
	 */
	public static  Punto  D gradi Radianti(double p Latitudine,
			double p Longitudine, double p Altitudine)
	{
		 Punto  D punto = new  Punto  D();
		punto.set Latitudine(p Latitudine *  Math. P I /    );
		punto.set Longitudine(p Longitudine *  Math. P I /    );
		punto.set Altitudine(p Altitudine);
		return punto;
	}
}
