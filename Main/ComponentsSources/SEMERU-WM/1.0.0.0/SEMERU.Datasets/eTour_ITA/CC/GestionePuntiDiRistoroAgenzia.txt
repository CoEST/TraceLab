package unisa.gps.etour.control. Gestione Punti Di Ristoro;

import java.rmi. Remote Exception;
import java.sql. S Q L Exception;
import java.util. Array List;
import java.util. Hash Map;
import java.util. Iterator;
import unisa.gps.etour.bean. Bean Convenzione;
import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.bean. Bean Turista;
import unisa.gps.etour.bean. Bean Visita P R;
/*
 *  C A U S A  T E S T import
 * unisa.gps.etour.control. Gestione Punti Di Ristoro.test.stub. D B Convenzione;
 * import unisa.gps.etour.control. Gestione Punti Di Ristoro.test.stub. D B Turista;
 */
import unisa.gps.etour.repository. D B Convenzione;
import unisa.gps.etour.repository. D B Turista;
import unisa.gps.etour.repository. I D B Convenzione;
import unisa.gps.etour.util. Messaggi Errore;

/**
 *  Classe contenente i metodi per la gestione dei  Punti di  Ristoro da parte
 * dell' Operatore  Agenzia
 * 
 * @author  Morelli  Giuseppe
 * @version  .  &#   ;      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I -
 *           University of  Salerno
 */
public class  Gestione Punti Di Ristoro Agenzia extends  Gestione Punti Di Ristoro Comune
		implements  I Gestione Punti Di Ristoro Agenzia
{

	private static final long serial Version U I D =   L;

	//  Costruttore
	public  Gestione Punti Di Ristoro Agenzia() throws  Remote Exception
	{
		//  Richiamo il costruttore della classe ereditata in modo da istanziare
		// le connessioni al database
		super();
		db Turista = new  D B Turista();
	}

	//  Metodo che permette all' Operatore  Agenzia di cancellare un certo  Punto di
	//  Ristoro
	// passando come parametro l' I D del  Punto di  Ristoro stesso
	public boolean cancella Punto Di Ristoro(int p Punto Di Ristoro I D)
			throws  Remote Exception
	{
		//  Controllo la validità dell'identificativo
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		try
		{
			// eseguo il metodo che cancella il  Punto di  Ristoro dal  Database
			// ed in caso di operazione a buon fine ritorno true
			if (punto Ristoro.cancella Punto Di Ristoro(p Punto Di Ristoro I D))
				return true;
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo cancella Punto Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo cancella Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Nel caso le operazioni non siano andate a buon fine ritorno false
		return false;
	}

	//  Metodo che permette all' Operatore  Agenzia di inserire nel database
	// il nuovo  Punto di  Ristoro con le informazioni contenute nel bean
	public boolean inserisci Punto Di Ristoro( Bean Punto Di Ristoro p Punto Di Ristoro)
			throws  Remote Exception
	{
		//  Controllo la validità del bean passato come parametro e nel caso
		// scateno l'eccezione remota
		if ((p Punto Di Ristoro == null)
				|| (!(p Punto Di Ristoro instanceof  Bean Punto Di Ristoro)))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		try
		{
			//  Richiamo il metodo della classe che opera sul database per
			// inserire il nuovo  Punto di  Ristoro
			if (punto Ristoro.inserisci Punto Di Ristoro(p Punto Di Ristoro))
				//  Nel caso in cui le operazioni siano andate a buon fine
				// restituisco true
				return true;
		}
		//  Eccezione nelle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo inserisci Punto Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo inserisci Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Nel caso in cui l'operazione non sia riuscita ritorno false
		return false;
	}

	//  Metodo che permette di ottenere un  Array List con tutti i  Bean dei punti
	// di  Ristoro
	public  Array List< Bean Punto Di Ristoro> ottieni Punti Di Ristoro()
			throws  Remote Exception
	{
		//  Array List da ritornare alla fine del metodo
		 Array List< Bean Punto Di Ristoro> to Return = null;
		try
		{
			//  Ottengo la lista dei  Punti di  Ristoro tramite la classe di
			// connessione al database
			// e salvo la lista stessa nell' Array List
			to Return = punto Ristoro.ottieni Lista P R();
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo ottieni Punti Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo ottieni Punti Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo l' Array List da ritornare in modo da non passare valori null
		// al chiamante
		if (to Return == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Ritorno l' Array List con tutti i  Punti di  Ristoro
		return to Return;
	}

	//  Metodo che permette di ottenere tutti i punti di  Ristoro che abbiano
	// una convenzione attiva o meno a seconda del parametro passato
	public  Array List< Bean Punto Di Ristoro> ottieni Punti Di Ristoro(
			boolean stato Convenzione) throws  Remote Exception
	{
		//  Array che mi permette di memorizzare tutti i  Punti di  Ristoro e dal
		// quale rimuoverò
		// a seconda del parametro passato i  Punti di  Ristoro attivi o meno
		 Array List< Bean Punto Di Ristoro> to Return = null;
		//  Array che mi permette di memorizzare tutti i  Punti di  Ristoro attivi
		// tramite la connessione al database
		 Array List< Bean Punto Di Ristoro> attivi = null;
		//  Istanza per la connessione al database
		 I D B Convenzione conv = new  D B Convenzione();
		try
		{
			//  Ricavo dalla connessione tutti i  Punti di  Ristoro  Attivi
			attivi = conv.ottieni Lista Convenzione Attiva P R();
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			 System.out
					.println(" Errore nel metodo ottieni Punti Di Ristoro(boolean): "
							+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out
					.println(" Errore nel metodo ottieni Punti Di Ristoro(boolean): "
							+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Se si vogliono ottenere i  Punti  Di  Ristoro attivi, allora ritorno
		// direttamente quelli passati dalla connessione al database
		if (stato Convenzione)
		{
			//  Controllo il contenuto dell' Array List in modo da non ritornare
			// valori nulli al chiamante
			if (attivi == null)
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
			return attivi;
		}
		else
		{
			try
			{
				//  Ricavo dalla connessione tutti i  Punti di  Ristoro per poi
				// effettuare i confronti
				to Return = punto Ristoro.ottieni Lista P R();
			}
			//  Eccezione nelle operazioni sul database
			catch ( S Q L Exception e)
			{
				 System.out
						.println(" Errore nel metodo ottieni Punti Di Ristoro(boolean): "
								+ e.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
			}
			//  Eccezioni impreviste determinate da altri fattori
			catch ( Exception ee)
			{
				 System.out
						.println(" Errore nel metodo ottieni Punti Di Ristoro(boolean): "
								+ ee.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
			}
			//  Dimensione dell' Array List contenente tutti i  Punti di  Ristoro che
			// potrebbe
			// cambiare dimensione se viene rimosso qualche elemento
			int dim = to Return.size();
			//  Variabile che mi permette di capire se rimuovere o meno un  Punto
			// di  Ristoro
			// dall' Array che poi devo ritornare
			boolean presente = false;
			//  Primo ciclo per scorrere tutti gli elementi dell' Array List di
			//  Tutti i  Punti di  Ristoro
			for (int i =  ; i < dim; i++)
			{
				//  Secondo ciclo per scorrere tutti gli elementi dell' Array List
				// coni soli  Punti di  Ristoro attivi
				for (int j =  ; j < attivi.size(); j++)
				{
					//  Se il  Punto di  Ristoro in questione ha l' I D uguale a uno
					// di quelli attivi, allora imposto presente a true
					if (attivi.get(j).get Id() == to Return.get(i).get Id())
						presente = true;
				}
				//  Se il  Punto di  Ristoro in questione ha una convenzione attiva
				// lo rimuovo da quelli da restituire
				if (presente)
					to Return.remove(i);
			}
		}
		//  Ritorno l' Array List ottenuto
		return to Return;
	}

	//  Metodo che permette di modificare un  Punto di  Ristoro passato come
	// parametro
	public boolean modifica Punto Di Ristoro(
			 Bean Punto Di Ristoro p Punto Di Ristoro Aggiornato)
			throws  Remote Exception
	{
		//  Controllo la validità del bean passato come parametro e nel caso
		// scateno un'eccezione remota
		if (p Punto Di Ristoro Aggiornato == null
				|| (!(p Punto Di Ristoro Aggiornato instanceof  Bean Punto Di Ristoro)))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		try
		{
			//  Richiamo il metodo con la connessione al database per modificare
			// il  Punto di  Ristoro
			if (punto Ristoro.modifica Punto Di Ristoro(p Punto Di Ristoro Aggiornato))
				//  Ritorno un valore positivo se l'operazione è andata a buon
				// fine
				return true;
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo modifica Punto Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo modifica Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Ritorno false se l'operazione non è andata a buon fine
		return false;
	}

	//  Metodo che permette di ottenere il  Bean di un particolare  Punto di
	//  Ristoro il cui
	// identificativo è passato come parametro
	public  Bean Punto Di Ristoro ottieni Punto Di Ristoro(int p Punto Di Ristoro I D)
			throws  Remote Exception
	{
		//  Controllo la validità dell'identificativo
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Bean da ritornare al chiamante
		 Bean Punto Di Ristoro to Return = null;
		try
		{
			//  Ricavo il  Punto di  Ristoro in questione tramite la connessione al
			// database
			to Return = punto Ristoro.ottieni Punto Di Ristoro(p Punto Di Ristoro I D);
		}
		//  Eccezione nelle opearazioni sul database
		catch ( S Q L Exception e)
		{
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo ottieni Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo il bean da restituire in modo da non ritornare valori nulli
		// al chiamante
		if (to Return == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Ritorno il bean del  Punto di  Ristoro
		return to Return;
	}

	//  Metodo che permette di attivare una particolare convenzione di un  Punto
	// di  Ristoro passato come parametro
	public boolean attiva Convenzione(int p Punto Di Ristoro I D,
			 Bean Convenzione p Conv) throws  Remote Exception
	{
		//  Controllo la validità dei parametri passati
		if ((p Punto Di Ristoro I D <  ) || (p Conv == null)
				|| (!(p Conv instanceof  Bean Convenzione)))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Controllo ulteriore sui dati
		if (p Conv.get Id Punto Di Ristoro() != p Punto Di Ristoro I D)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		 I D B Convenzione conv = null;
		try
		{
			//  Istanzio la classe per la connessione al database
			conv = new  D B Convenzione();
			//  Se la convenzione non è ancora attiva, allora provvedo ad
			// attivarla in locale e poi passare il bean modificato al database
			if (conv.ottieni Convezione Attiva(p Punto Di Ristoro I D) == null)
			{
				p Conv.set Attiva(true);
				conv.modifica Convenzione(p Conv);
				return true;
			}
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo attiva Convenzione: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Se l'operazione non è andata a buon fine ritorno false
		return false;
	}

	//  Metodo che restituisce una  Hash Map contenente, per il  Punto di  Ristoro
	// passato come parametro, i feedback ad esso associati
	public  Hash Map< Bean Visita P R,  String> ottieni Feedback Punto Di Ristoro(
			int p Punto Di Ristoro I D) throws  Remote Exception
	{
		//  Controllo l'identificativo passato come parametro
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Istanzio la mappa e l' Array List che utilizzerò nell'esecuzione del
		// metodo
		 Hash Map< Bean Visita P R,  String> mappa Ritorno = null;
		 Array List< Bean Visita P R> visita  = null;
		try
		{
			//  Qui prendo la lista di tutte le visite per il  P R passato come
			// parametro
			visita  = feed.ottieni Lista Visita P R(p Punto Di Ristoro I D);
			//  Istanzio la mappa delle stesse dimensioni della lista di
			//  Bean Visita P R
			mappa Ritorno = new  Hash Map< Bean Visita P R,  String>(visita .size());
			//  Qui inizio a iterare per aggiungere a ogni visita il relativo
			// username
			for ( Iterator< Bean Visita P R> iteratore Visita P R = visita .iterator(); iteratore Visita P R
					.has Next();)
			{
				//  Recuperto il  Bean Visita P R
				 Bean Visita P R b Visita Temp = iteratore Visita P R.next();
				//  Recupero il  Turista che ha lasciato il commento che sto
				// esaminando
				 Bean Turista b Turista Temp = db Turista.ottieni Turista(b Visita Temp
						.get Id Turista());
				//  Prendo l'username del  Turista
				 String username Turista Temp = b Turista Temp.get Username();
				//  Inserisco la coppia nella mappa
				mappa Ritorno.put(b Visita Temp, username Turista Temp);
			}
		}
		//  Eccezione nelle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo ottieni Feedback P R: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo ottieni Feedback P R: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo il parametro di ritorno in modo da non passare valori nulli
		// al database
		if (mappa Ritorno == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		return mappa Ritorno;
	}

	//  Metodo che inserisce un tag tra quelli di un  Punto  Di  Ristoro
	public boolean cancella Tag Punto Di Ristoro(int p Punto Di Ristoro Id, int p Tag Id)
			throws  Remote Exception
	{
		//  Controlla la validità dei dati passati
		if ((p Punto Di Ristoro Id <  ) || (p Tag Id <  ))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Array List nel quale memorizzo tutti i tag
		 Array List< Bean Tag> tag ;
		//  Variabile booleana per controllare se il  Punto di  Ristoro
		// possiede il tag che si vuole cancellare
		boolean presente = false;
		try
		{
			//  Utilizzo il metodo tramite la classe di connessione al database
			tag  = tag.ottieni Tag Punto Di Ristoro(p Punto Di Ristoro Id);
		}
		//  Eccezione nell'esecuzione delle operazioni su database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo cancella Tag Punto Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezione imprevista dovuta ad altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo cancella Tag Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo ciclicamente se il tag è presente attualmente
		// tra quelli del  Punto di  Ristoro
		for ( Bean Tag t : tag )
			if (t.get Id() == p Tag Id)
				presente = true;
		//  Se il tag è presente tra quelli del  Punto di  Ristoro, allora
		// provvedo ad eseguire l'operazione di cancellazione
		if (presente)
		{
			try
			{
				return tag.cancella Tag Punto Di Ristoro(p Punto Di Ristoro Id, p Tag Id);
			}
			//  Eccezione nell'esecuzione dell'operazione sul database
			catch ( S Q L Exception e)
			{
				 System.out
						.println(" Errore nel metodo cancella Tag Punto Di Ristoro: "
								+ e.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
			}
			//  Eccezione imprevista dovuta ad altri fattori
			catch ( Exception ee)
			{
				 System.out
						.println(" Errore nel metodo cancella Tag Punto Di Ristoro: "
								+ ee.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
			}
		}
		//  Nel caso in cui qualcosa non sia andato a buon fine
		// ritorno il valore false
		return false;
	}

	//  Metodo che cancella un tag da quelli di un  Punto  Di  Ristoro
	//  Le operazioni sono identiche a quelle sopra, eccezion fatta per
	// il controllo sulla presenza del tag tra quelli del  Punto di  Ristoro
	// che deve dare esito negativo, e la chiamata che qui è al metodo di
	// inserimento
	public boolean inserisci Tag Punto Di Ristoro(int p Punto Di Ristoro Id, int p Tag Id)
			throws  Remote Exception
	{
		if ((p Punto Di Ristoro Id <  ) || (p Tag Id <  ))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);

		 Array List< Bean Tag> tag ;
		boolean presente = false;
		try
		{
			tag  = tag.ottieni Tag Punto Di Ristoro(p Punto Di Ristoro Id);
		}
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo inserisci Tag Punto Di Ristoro: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo inserisci Tag Punto Di Ristoro: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		for ( Bean Tag t : tag )
			if (t.get Id() == p Tag Id)
				presente = true;
		//  Controllo che il  Punto di  Ristoro non abbia già il  Tag specificato
		if (!presente)
		{
			try
			{
				//  Chiamata al metodo di aggiunta tramite la classe di
				// connessione al database
				return tag.aggiunge Tag Punto Di Ristoro(p Punto Di Ristoro Id, p Tag Id);
			}
			catch ( S Q L Exception e)
			{
				 System.out
						.println(" Errore nel metodo inserisci Tag Punto Di Ristoro: "
								+ e.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
			}
			catch ( Exception ee)
			{
				 System.out
						.println(" Errore nel metodo inserisci Tag Punto Di Ristoro: "
								+ ee.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
			}
		}
		//  Ritorno false se qualche operazione non è andata a buon fine
		return false;
	}
}
