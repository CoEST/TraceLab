package unisa.gps.etour.gui.operatore agenzia ;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.border.*;
import unisa.gps.etour.bean. Bean Bene Culturale;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.control. Gestione Beni Culturali. I Gestione Beni Culturali Agenzia;
import unisa.gps.etour.control. Gestione Beni Culturali. I Gestione Beni Culturali Comune;
import unisa.gps.etour.control. Gestione Tag. I Gestione Tag Comune;
import unisa.gps.etour.gui. Desk Manager;
import unisa.gps.etour.gui. Help Manager;
import unisa.gps.etour.gui.operatore agenzia .tables. Media Voti Renderer;
import unisa.gps.etour.gui.operatore agenzia .tables. Punto  D Renderer;
import unisa.gps.etour.gui.operatore agenzia .tables. Scrollable Table;
import unisa.gps.etour.gui.operatore agenzia .tables. Sito Table Model;
import unisa.gps.etour.util. Punto  D;
import java.io. File Not Found Exception;
import java.rmi. Remote Exception;
import java.rmi.registry. Locate Registry;
import java.rmi.registry. Registry;
import java.util. Array List;

/**
 *  Classe che realizza l'interfaccia per la gestione di beni culturali lato
 *  Operatore  Agenzia.
 * 
 * @author  Mario  Gallo
 * @version  .  
 * &#   ;      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I -
 *           University of  Salerno
 */
public class  Beni Culturali extends  J Internal Frame
{
	private  J Desktop Pane j Desktop Pane;
	private  J Panel j Content Pane = null;
	private  J Tool Bar  B C Toolbar = null;
	private  J Button btn Nuovo B C = null;
	private  J Button btn Scheda B C = null;
	private  J Button btn Elimina B C = null;
	private  J Button btn Modifica B C = null;
	private  J Panel right Panel = null;
	private  J Panel search Panel = null;
	private  J Panel help Panel = null;
	private  J Scroll Pane j Scroll Pane = null;
	private  J Table table B C = null;
	private  Tag Panel pannello Tag = null;
	private  J Text Pane text Guida = null;
	private  J Text Field nome B C = null;
	private  J Button btn Ricerca = null;
	private  J Button btn Azzera = null;
	private  Desk Manager desktop Manager;
	private  Array List< Scheda B C> figli;
	private  Sito Table Model table Model;
	private  Help Manager bc Help;
	private  I Gestione Beni Culturali Agenzia gestione B C;
	private  I Gestione Tag Comune tag;
	protected  I Gestione Beni Culturali Comune ricerca B C;

	/**
	 *  Questo &egrave; il costruttore di default.
	 */
	public  Beni Culturali()
	{
		super(" Beni  Culturali");
		set Preferred Size( Home. C H I L D_ S I Z E);
		frame Icon = new  Image Icon(get Class().get Resource(
				 Home. U R L_ I M A G E S + " B C.png"));
		set Default Close Operation( J Internal Frame. D O_ N O T H I N G_ O N_ C L O S E);
		closable = true;
		resizable = true;
		iconable = true;
		maximizable = true;

		//  Setting up dell'help manager per beni culturali.
		text Guida = new  J Text Pane();
		try
		{
			bc Help = new  Help Manager( Home. U R L_ H E L P + " Beni Culturali.txt",
					text Guida);
		}
		catch ( File Not Found Exception e)
		{
			text Guida
					.set Text("<html><b> Guida in linea non disponibile!</b></html>");
		}
		set Content Pane(get J Content Pane());
		figli = new  Array List< Scheda B C>();
		add Internal Frame Listener(new  Internal Frame Adapter()
		{
			/*
			 *  All'inserimento del frame nel desktop pane recupera desktop pane
			 * e desktop manager e inizializza gli oggetti remoti per la
			 * gestione dei beni culturali.
			 */

			public void internal Frame Opened( Internal Frame Event p Event)
			{
				 J Internal Frame frame = p Event.get Internal Frame();
				j Desktop Pane = frame.get Desktop Pane();
				desktop Manager = ( Desk Manager) j Desktop Pane.get Desktop Manager();

				//  Setting up degli oggetti remoti per la gestione dei beni
				// culturali.
				try
				{
					 Registry reg =  Locate Registry.get Registry( Home. H O S T);
					gestione B C = ( I Gestione Beni Culturali Agenzia) reg
							.lookup(" Gestione Beni Culturali Agenzia");
					tag = ( I Gestione Tag Comune) reg.lookup(" Gestione Tag Comune");
					ricerca B C = ( I Gestione Beni Culturali Comune) reg
							.lookup(" Gestione Beni Culturali Comune");
					//  Caricamento dei dati.
					carica Tabella(false);
					carica Tags();
				}
				/*
				 *  Due eccezioni:  Remote Exception e  Not Bound Exception.  Il
				 * risultato è lo stesso.  La gestione non è operabile e la
				 * finestra dopo il messaggio di errore verrà chiusa.
				 */
				catch ( Exception ex)
				{
					 J Label errore = new  J Label(
							"<html><h > Impossibile comunicare con il server di e Tour.</h >"
									+ "<h ><u> La finestra di gestione richiesta verrà chiusa.</u></h >"
									+ "<p><b> Possibili  Cause:</b>"
									+ "<ul><li> Nessuna connessione alla rete.</li>"
									+ "<li> Server inattivo.</li>"
									+ "<li> Server intasato.</li></ul>"
									+ "<p> Si prega di riprovare in un secondo momento.</p>"
									+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
									+ "<p> Ci scusiamo per il disagio.</html>");
					 Image Icon err = new  Image Icon(get Class().get Resource(
							 Home. U R L_ I M A G E S + "error  .png"));
					 J Option Pane.show Message Dialog(j Desktop Pane, errore,
							" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
					frame.dispose();
				}
			}

			/*
			 *  Alla chiusura del frame viene visualizzato il dialogo di
			 * conferma.
			 */
			public void internal Frame Closing( Internal Frame Event p Event)
			{
				//  Creazione del dialogo di conferma.
				 J Panel root = new  J Panel(new  Border Layout());
				 J Label message = new  J Label(
						" Sei sicuro di voler chiudere la finestra di gestione dei beni culturali?");
				message.set Font(new  Font(" Dialog",  Font. B O L D,   ));
				 J Label avviso = new  J Label(
						" N. B.  Verranno chiuse tutte le finestre aperte da questa gestione.",
						 Swing Constants. C E N T E R);
				avviso.set Icon(new  Image Icon(get Class().get Resource(
						 Home. U R L_ I M A G E S + "warning  .png")));
				root.add(message,  Border Layout. N O R T H);
				root.add(avviso,  Border Layout. S O U T H);
				 String[] options = { " Chiudi", " Annulla" };
				int choice =  J Option Pane.show Internal Option Dialog(j Content Pane,
						root, " Conferma chiusura  Beni  Culturali",
						 J Option Pane. O K_ C A N C E L_ O P T I O N,
						 J Option Pane. Q U E S T I O N_ M E S S A G E, frame Icon, options,
						options[ ]);
				/*
				 *  Se viene confermata la chiusura della gestione, tutte le
				 * classi "figlie" vengono chiuse.
				 */
				if (choice ==  J Option Pane. O K_ O P T I O N)
				{
					for (int i =  ; i < figli.size(); i++)
					{
						figli.get(i).dispose();
					}
					p Event.get Internal Frame().dispose();
				}
			}

		});
	}

	/**
	 *  Aggiorna il modello corrente della table dei beni culturali con il bean
	 * del bene culturale fornito in input.
	 * 
	 * @param p Bc  Bean Bene Culturale - il bean con il quale aggiornare il
	 *            modello.
	 */
	protected void update Table Model( Bean Bene Culturale p Bc)
	{
		table Model.update B C(p Bc);
	}

	/**
	 *  Chiude la scheda bene culturale selezionata.
	 * 
	 * @param p Scheda  Scheda B C - la scheda bene culturale da chiudere.
	 */
	protected void close Scheda( Scheda B C p Scheda)
	{
		figli.remove(p Scheda);
		p Scheda.dispose();
	}

	/**
	 *  Questo metodo inizializza il content pane del frame.
	 * 
	 * @return javax.swing. J Panel - il content pane.
	 */
	private  J Panel get J Content Pane()
	{
		if (j Content Pane == null)
		{
			j Content Pane = new  J Panel();
			j Content Pane.set Layout(new  Border Layout());
			j Content Pane.add(get B C Toolbar(),  Border Layout. N O R T H);
			j Content Pane.add(get Pannello Destro(),  Border Layout. E A S T);
			j Content Pane.add(get J Scroll Pane(),  Border Layout. C E N T E R);
		}
		return j Content Pane;
	}

	/**
	 *  Questo metodo inizializza la toolbar per le funzionalit&agrave; relative alla
	 * gestione dei beni culturali.
	 * 
	 * @return javax.swing. J Tool Bar - la toolbar per la gestione dei beni
	 *         culturali.
	 */
	private  J Tool Bar get B C Toolbar()
	{
		if ( B C Toolbar == null)
		{
			 B C Toolbar = new  J Tool Bar();
			 B C Toolbar.set Preferred Size(new  Dimension( ,   ));
			 B C Toolbar.set Floatable(false);
			 B C Toolbar.set Orientation( J Tool Bar. H O R I Z O N T A L);
			 B C Toolbar.set Layout(null);
			 B C Toolbar.add(get Btn Nuovo B C());
			 B C Toolbar.add Separator();
			 B C Toolbar.add(get Btn Modifica B C());
			 B C Toolbar.add Separator();
			 B C Toolbar.add(get Btn Scheda B C());
			 B C Toolbar.add Separator();
			 B C Toolbar.add(get Btn Elimina B C());
		}
		return  B C Toolbar;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'inserimento di un nuovo bene
	 * culturale.
	 * 
	 * @return javax.swing. J Button - il pulsante per l'inserimento.
	 */
	private  J Button get Btn Nuovo B C()
	{
		if (btn Nuovo B C == null)
		{
			btn Nuovo B C = new  J Button();
			btn Nuovo B C.set Text("<html> Nuovo<br> Bene&nbsp; Culturale</html>");
			btn Nuovo B C.set Bounds( ,  ,    ,   );
			btn Nuovo B C.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + "nuovo B C.png")));
			btn Nuovo B C.set Name("btn Nuovo B C");
			btn Nuovo B C.add Mouse Listener(bc Help);
			btn Nuovo B C
					.set Cursor( Cursor.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Nuovo B C.add Action Listener(new  Action Listener()
			{
				public void action Performed( Action Event p Event)
				{
					//  Apre una scheda per l'inserimento di un nuovo bene
					// culturale.
					open Scheda(null, false);
				}
			});
		}
		return btn Nuovo B C;
	}

	/**
	 *  Questo metodo inizializza il pulsante per accedere alla scheda di un bene
	 * culturale selezionato.
	 * 
	 * @return javax.swing. J Button - il pulsante per la scheda.
	 */
	private  J Button get Btn Scheda B C()
	{
		if (btn Scheda B C == null)
		{
			btn Scheda B C = new  J Button();
			btn Scheda B C.set Bounds(   ,  ,    ,   );
			btn Scheda B C.set Text("<html> Scheda<br> Bene&nbsp; Culturale</html>");
			btn Scheda B C.set Vertical Text Position( Swing Constants. T O P);
			btn Scheda B C.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + "scheda.png")));
			btn Scheda B C.set Enabled(false);
			btn Scheda B C.set Cursor( Cursor
					.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Scheda B C.set Name("btn Scheda B C");
			btn Scheda B C.add Mouse Listener(bc Help);
			btn Scheda B C.add Action Listener(new  Action Listener()
			{
				public void action Performed( Action Event p Event)
				{
					int selected Row = table B C.get Selected Row();
					 Bean Bene Culturale to Do = null;
					try
					{
						to Do = gestione B C.ottieni Bene Culturale(table Model
								.get I D(selected Row));
						//  Apre la scheda del bene culturale con la modifica
						// disattivata.
						open Scheda(to Do, false);
					}
					catch ( Exception ex)
					{
						 J Label errore = new  J Label(
								"<html><h > Impossibile comunicare con il server di e Tour.</h >"
										+ "<h ><u> La scheda richiesta non può essere caricata.</u></h >"
										+ "<p> Si prega di riprovare in un secondo momento.</p>"
										+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
										+ "<p> Ci scusiamo per il disagio.</html>");
						 Image Icon err = new  Image Icon(get Class().get Resource(
								 Home. U R L_ I M A G E S + "error  .png"));
						 J Option Pane.show Message Dialog(j Desktop Pane, errore,
								" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
					}
				}
			});
		}
		return btn Scheda B C;
	}

	/**
	 *  Questo metodo inizializza il pulsante per accedere alla modifica di un
	 * bene culturale.
	 * 
	 * @return javax.swing. J Button - il pulsante per la scheda.
	 */
	private  J Button get Btn Modifica B C()
	{
		if (btn Modifica B C == null)
		{
			btn Modifica B C = new  J Button();
			btn Modifica B C.set Bounds(   ,  ,    ,   );
			btn Modifica B C
					.set Text("<html> Modifica&nbsp; Dati<br> Bene&nbsp; Culturale</html>");
			btn Modifica B C.set Enabled(false);
			btn Modifica B C.set Cursor( Cursor
					.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Modifica B C.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Modifica B C  .png")));
			btn Modifica B C.set Name("btn Modifica B C");
			btn Modifica B C.add Mouse Listener(bc Help);
			btn Modifica B C.add Action Listener(new  Action Listener()
			{
				public void action Performed( Action Event p Event)
				{
					int selected Row = table B C.get Selected Row();
					 Bean Bene Culturale to Do = null;
					try
					{
						to Do = gestione B C.ottieni Bene Culturale(table Model
								.get I D(selected Row));
						//  Apre la scheda del bene culturale con la modifica
						// attivata.
						open Scheda(to Do, true);
					}
					catch ( Exception ex)
					{
						 J Label errore = new  J Label(
								"<html><h > Impossibile comunicare con il server di e Tour.</h >"
										+ "<h ><u> La scheda richiesta non può essere caricata.</u></h >"
										+ "<p> Si prega di riprovare in un secondo momento.</p>"
										+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
										+ "<p> Ci scusiamo per il disagio.</html>");
						 Image Icon err = new  Image Icon(get Class().get Resource(
								 Home. U R L_ I M A G E S + "error  .png"));
						 J Option Pane.show Message Dialog(j Desktop Pane, errore,
								" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
					}

				}
			});
		}
		return btn Modifica B C;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'eliminazione di un bene
	 * culturale selezionato.
	 * 
	 * @return javax.swing. J Button - il pulsante per l'eliminazione.
	 */
	private  J Button get Btn Elimina B C()
	{
		if (btn Elimina B C == null)
		{
			btn Elimina B C = new  J Button();
			btn Elimina B C.set Bounds(   ,  ,    ,   );
			btn Elimina B C.set Text("<html> Elimina<br> Bene  Culturale</html>");
			btn Elimina B C.set Vertical Text Position( Swing Constants. T O P);
			btn Elimina B C.set Cursor( Cursor
					.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Elimina B C.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Elimina B C  .png")));
			btn Elimina B C.set Cursor( Cursor
					.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Elimina B C.set Enabled(false);
			btn Elimina B C.add Action Listener(new  Action Listener()
			{
				public void action Performed( Action Event p Event)
				{
					int selected Row = table B C.get Selected Row();
					 String nome = ( String) table Model
							.get Value At(selected Row,  );

					//  Creazione del dialogo di conferma eliminazione.
					 J Panel root = new  J Panel(new  Border Layout());
					 J Label message = new  J Label(
							" Sei sicuro di voler eliminare il bene culturale "
									+ nome + "?");
					message.set Font(new  Font(" Dialog",  Font. B O L D,   ));
					 J Label avviso = new  J Label(
							" I dati eliminati non potranno essere più recuperati.",
							 Swing Constants. C E N T E R);
					avviso.set Icon(new  Image Icon(get Class().get Resource(
							 Home. U R L_ I M A G E S + "warning  .png")));
					root.add(message,  Border Layout. N O R T H);
					root.add(avviso,  Border Layout. S O U T H);
					 String[] options = { " Elimina", " Annulla" };
					int scelta =  J Option Pane.show Internal Option Dialog(
							j Content Pane, root, " Conferma  Eliminazione",
							 J Option Pane. Y E S_ N O_ O P T I O N,
							 J Option Pane. Q U E S T I O N_ M E S S A G E,
							new  Image Icon(get Class().get Resource(
									 Home. U R L_ I M A G E S + " Elimina B C  .png")),
							options, options[ ]);
					//  Se l'eliminazione viene confermata, elimina il bene
					// culturale selezionato.
					if (scelta ==  J Option Pane. Y E S_ O P T I O N)
					{
						try
						{
							gestione B C.cancella Bene Culturale(table Model
									.get I D(selected Row));
							table Model.remove Sito(selected Row);
							 J Label confirm = new  J Label(" Il bene culturale "
									+ nome + " è stato eliminato.");
							confirm.set Font(new  Font(" Dialog",  Font. B O L D,   ));
							 J Option Pane.show Internal Message Dialog(j Content Pane,
									confirm, " Beni culturali",
									 J Option Pane. O K_ O P T I O N, new  Image Icon(
											get Class().get Resource(
													 Home. U R L_ I M A G E S
															+ "ok  .png")));
						}
						catch ( Exception ex)
						{
							 J Label errore = new  J Label(
									"<html><h > Impossibile comunicare con il server di e Tour.</h >"
											+ "<h ><u> L'operazione di eliminazione richiesta non può essere completata.</u></h >"
											+ "<p> Si prega di riprovare in un secondo momento.</p>"
											+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
											+ "<p> Ci scusiamo per il disagio.</html>");
							 Image Icon err = new  Image Icon(get Class()
									.get Resource(
											 Home. U R L_ I M A G E S + "error  .png"));
							 J Option Pane.show Message Dialog(j Desktop Pane, errore,
									" Errore!",  J Option Pane. E R R O R_ M E S S A G E, err);
						}
					}
				}
			});
			btn Elimina B C.set Name("btn Elimina B C");
			btn Elimina B C.add Mouse Listener(bc Help);

		}
		return btn Elimina B C;

	}

	/**
	 *  Questo metodo inizializza il lato destro dell'interfaccia.
	 * 
	 * @return javax.swing. J Panel - il pannello destro dell'intefaccia.
	 */
	private  J Panel get Pannello Destro()
	{
		if (right Panel == null)
		{
			right Panel = new  J Panel();
			right Panel.set Layout(new  Border Layout());
			right Panel.add(get Help Panel(),  Border Layout. S O U T H);
			right Panel.add(get Search Panel(),  Border Layout. C E N T E R);
		}
		return right Panel;
	}

	/**
	 *  Questo metodo inizializza il pannello per la ricerca di un bene
	 * culturale.
	 * 
	 * @return javax.swing. J Panel - il pannello di ricerca.
	 */
	private  J Panel get Search Panel()
	{
		if (search Panel == null)
		{
			 Grid Bag Constraints g = new  Grid Bag Constraints();
			search Panel = new  J Panel(new  Grid Bag Layout());
			search Panel.set Border( Border Factory.create Titled Border(
					 Border Factory.create Line Border(new  Color(  ,    ,    ),  ),
					" Ricerca  Bene  Culturale",
					 Titled Border. D E F A U L T_ J U S T I F I C A T I O N,
					 Titled Border. D E F A U L T_ P O S I T I O N, new  Font(" Dialog",
							 Font. B O L D,   ), new  Color( ,    ,    )));
			g.anchor =  Grid Bag Constraints. C E N T E R;
			//  Top -  Left -  Bottom -  Right
			g.insets = new  Insets( ,  ,  ,  );
			g.gridwidth =  ;
			g.gridx =  ;
			g.gridy =  ;
			search Panel.add(new  J Label(" Nome  Bene  Culturale:"), g);
			g.gridy =  ;
			nome B C = new  J Text Field();
			nome B C.set Columns(  );
			nome B C.set Name("nome B C");
			nome B C.add Mouse Listener(bc Help);
			search Panel.add(nome B C, g);
			g.gridy =  ;
			search Panel.add(new  J Label(" Seleziona tag di ricerca:"), g);
			g.fill =  Grid Bag Constraints. V E R T I C A L;
			g.gridy =  ;
			g.weightx =  . ;
			g.weighty =  . ;
			g.insets = new  Insets( ,  ,   ,  );
			pannello Tag = new  Tag Panel();
			pannello Tag.set Preferred Size(new  Dimension(   ,   ));
			pannello Tag.set Name("pannello Tag");
			pannello Tag.add Mouse Listener(bc Help);
			search Panel.add(pannello Tag, g);
			g.insets = new  Insets( ,  ,  ,  );
			g.weightx =  ;
			g.weighty =  ;
			g.gridwidth =  ;
			g.gridy =  ;
			g.fill =  Grid Bag Constraints. N O N E;
			search Panel.add(get Btn Ricerca(), g);
			g.gridx =  ;
			search Panel.add(get Btn Azzera(), g);

		}
		return search Panel;
	}

	/**
	 *  Questo metodo inizializza il pannello contenente la guida in linea.
	 * 
	 * @return javax.swing. J Panel - il pannello della guida.
	 */
	private  J Panel get Help Panel()
	{
		if (help Panel == null)
		{
			help Panel = new  J Panel();
			help Panel.set Layout(new  Border Layout());
			help Panel.set Border( Border Factory.create Titled Border( Border Factory
					.create Line Border(new  Color(  ,    ,    ),  ),
					" Guida in  Linea",  Titled Border. D E F A U L T_ J U S T I F I C A T I O N,
					 Titled Border. D E F A U L T_ P O S I T I O N, new  Font(" Dialog",
							 Font. B O L D,   ), new  Color( ,    ,    )));
			text Guida.set Preferred Size(new  Dimension(   ,   ));
			text Guida.set Content Type("text/html");
			text Guida
					.set Text("<html> Muovi il puntatore del mouse su un controllo "
							+ "d'interesse per visualizzare la guida sensibile al contesto.</html>");
			text Guida.set Editable(false);
			text Guida.set Opaque(false);
			help Panel.add(text Guida,  Border Layout. C E N T E R);
		}
		return help Panel;
	}

	/**
	 *  Questo metodo inizializza lo scroll pane e la table dei beni culturali.
	 * 
	 * @return javax.swing. J Scroll Pane - lo scroll Pane.
	 */
	private  J Scroll Pane get J Scroll Pane()
	{
		if (j Scroll Pane == null)
		{
			if (table B C == null)
			{
				table Model = new  Sito Table Model();
				table B C = new  Scrollable Table(table Model);
				table B C.set Row Height(  );
				table B C.set Default Renderer( Double.class,
						new  Media Voti Renderer());
				table B C
						.set Default Renderer( Punto  D.class,
								new  Punto  D Renderer());
				table B C.set Selection Mode( List Selection Model. S I N G L E_ S E L E C T I O N);
				table B C.set Selection Foreground( Color. R E D);
				table B C.set Selection Background( Color.white);
				table B C.set Show Vertical Lines(false);
				table B C.set Column Selection Allowed(false);
				table B C.add Mouse Listener(bc Help);
				table B C.set Name("table B C");
				/*
				 *  Selection Listener - se una riga � selezionata, i pulsanti
				 * scheda, modifica ed elimina sono attivi.  Altrimenti, sono
				 * disabilitati.
				 */
				 List Selection Model selection Model = table B C.get Selection Model();
				selection Model
						.add List Selection Listener(new  List Selection Listener()
						{
							public void value Changed( List Selection Event p Event)
							{
								if (table B C.get Selected Row() != - )
								{
									btn Elimina B C.set Enabled(true);
									btn Scheda B C.set Enabled(true);
									btn Modifica B C.set Enabled(true);
								}
								else
								{
									btn Elimina B C.set Enabled(false);
									btn Scheda B C.set Enabled(false);
									btn Modifica B C.set Enabled(false);
								}
							}
						});
				/*
				 *  Key Listener < E N T E R> -  Scheda del bene culturale selezionato.
				 * < B A C K S P A C E> -  Elimina il bene culturale selezionato. < S P A C E> -
				 *  Modifica il bene culturale selezionato.
				 */
				table B C.add Key Listener(new  Key Adapter()
				{
					public void key Pressed( Key Event p Event)
					{
						int key Code = p Event.get Key Code();
						if (key Code ==  Key Event. V K_ E N T E R)
						{
							btn Scheda B C.do Click();
						}
						else if (key Code ==  Key Event. V K_ B A C K_ S P A C E)
						{
							btn Elimina B C.do Click();
						}
						else if (key Code ==  Key Event. V K_ S P A C E)
						{
							btn Modifica B C.do Click();
						}
					}
				});
			}

			j Scroll Pane = new  J Scroll Pane(table B C);
			j Scroll Pane
					.set Horizontal Scroll Bar Policy( J Scroll Pane. H O R I Z O N T A L_ S C R O L L B A R_ A L W A Y S);
			j Scroll Pane
					.set Vertical Scroll Bar Policy( J Scroll Pane. V E R T I C A L_ S C R O L L B A R_ A L W A Y S);
		}
		return j Scroll Pane;
	}

	/**
	 *  Questo metodo inizializza il pulsante per la ricerca di un bene
	 * culturale.
	 * 
	 * @return javax.swing. J Button - il pulsante per la ricerca.
	 */
	private  J Button get Btn Ricerca()
	{
		if (btn Ricerca == null)
		{
			btn Ricerca = new  J Button();
			btn Ricerca.set Text(" Ricerca");
			btn Ricerca.set Preferred Size(new  Dimension(  ,   ));
			btn Ricerca.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Ricerca  .png")));
			btn Ricerca
					.set Cursor( Cursor.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Ricerca.set Name("btn Ricerca");
			btn Ricerca.add Mouse Listener(bc Help);
		}
		return btn Ricerca;
	}

	/**
	 *  Questo metodo inizializza il pulsante per l'azzeramento della form di
	 * ricerca bene culturale.
	 * 
	 * @return javax.swing. J Button - il pulsante per il reset della form.
	 */
	private  J Button get Btn Azzera()
	{
		if (btn Azzera == null)
		{
			btn Azzera = new  J Button();
			btn Azzera.set Text(" Azzera");
			btn Azzera.set Horizontal Text Position( Swing Constants. L E A D I N G);
			btn Azzera.set Preferred Size(new  Dimension(  ,   ));
			btn Azzera.set Icon(new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + " Azzera  .png")));
			btn Azzera.set Name("btn Azzera");
			btn Azzera.set Cursor( Cursor.get Predefined Cursor( Cursor. H A N D_ C U R S O R));
			btn Azzera.add Mouse Listener(bc Help);
			btn Azzera.add Action Listener(new  Action Listener()
			{
				public void action Performed( Action Event arg )
				{
					nome B C.set Text("");
					pannello Tag.azzera();
				}

			});
		}
		return btn Azzera;
	}

	/**
	 *  Questo metodo apre una scheda del bene culturale selezionato o apre la
	 * finestra per l'inserimento di un nuovo bene culturale.
	 * 
	 * @param p Bc  Bean Bene Culturale - il bean del bene culturale di cui si
	 *            desidera visualizzare la scheda.
	 * @param p Modifica boolean -
	 *            <ul>
	 *            <li><i>true</i> - indica che si sta effettuando una modifica
	 *            dei dati del bene culturale.
	 *            <li><i>false</i> indica che si sta visualizzando la scheda
	 *            del bene culturale.
	 */
	private void open Scheda( Bean Bene Culturale p Bc, boolean p Modifica)
	{
		 Scheda B C nuova;
		if (p Bc == null)
		{
			nuova = new  Scheda B C(this);

		}
		else
		{
			for (int i =  ; i < figli.size(); i++)
			{
				 Scheda B C corrente = figli.get(i);
				if (p Bc.get Id() == corrente.get Id())
				{
					desktop Manager.activate Frame(corrente);
					return;
				}
			}
			nuova = new  Scheda B C(this, p Bc, p Modifica);
		}
		j Desktop Pane.add(nuova,  Integer. M A X_ V A L U E);
		desktop Manager.center Frame(nuova);
		nuova.set Visible(true);
		figli.add(nuova);
	}

	/**
	 *  Questo metodo importa i beni culturali scaricati dal server nella
	 * tabella.
	 * 
	 * @param p Ricerca boolean
	 *            <ul>
	 *            <li><i>true</i> - include i parametri di ricerca.
	 *            <li><i>false</i> altrimenti.
	 *            </ul>
	 */
	private void carica Tabella(boolean p Ricerca)
	{
		 Array List< Bean Bene Culturale> beni Culturali = null;
		try
		{
			if (p Ricerca)
			{

			}
			else
			{
				beni Culturali = gestione B C.ottieni Beni Culturali();
			}
		}
		//  In caso di errore visualizza un messaggio di errore.
		catch ( Remote Exception e)
		{
			 J Label errore = new  J Label(
					"<html><h > Impossibile comunicare con il server di e Tour.</h >"
							+ "<h ><u> La lista dei beni culturali non è stata caricata.</u></h >"
							+ "<p> Si prega di riprovare in un secondo momento.</p>"
							+ "<p> Se l'errore dovesse persistere, si prega di contattare l'assistenza tecnica.</p>"
							+ "<p> Ci scusiamo per il disagio.</html>");
			 Image Icon err = new  Image Icon(get Class().get Resource(
					 Home. U R L_ I M A G E S + "error  .png"));
			 J Option Pane.show Internal Message Dialog(this, errore, " Errore!",
					 J Option Pane. E R R O R_ M E S S A G E, err);
		}
		finally
		{
			table Model = new  Sito Table Model(beni Culturali);
			table B C.set Model(table Model);
			organizza Riga();
		}
	}

	/**
	 *  Questo metodo carica i tag disponibili nel sistema e li importa nel
	 * pannello dei tag.
	 */
	private void carica Tags()
	{
		 Array List< Bean Tag> bean Tags = null;
		try
		{
			bean Tags = tag.ottieni Tags();
			for ( Bean Tag b : bean Tags)
			{
				pannello Tag.insert Tag(b);
			}
			pannello Tag.repaint();
		}
		//  In caso di errore il pannello tag rimane vuoto.
		catch ( Remote Exception e)
		{
		}
	}

	/**
	 *  Questo metodo imposta le dimensioni delle colonne per i dati dei beni
	 * culturali.
	 */
	private void organizza Riga()
	{
		//  Nome
		table B C.get Column Model().get Column( ).set Preferred Width(   );
		//  Indirizzo
		table B C.get Column Model().get Column( ).set Preferred Width(   );
		//  Telefono
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  Località
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  Città
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  C A P
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  Prov
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  R A T I N G
		table B C.get Column Model().get Column( ).set Preferred Width(  );
		//  P O S G E O
		table B C.get Column Model().get Column( ).set Preferred Width(   );
	}
}
