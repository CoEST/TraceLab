package unisa.gps.etour.util;

import java.awt.image. Buffered Image;
import java.util. Date;

import javax.swing. Image Icon;

import unisa.gps.etour.bean. Bean Banner;
import unisa.gps.etour.bean. Bean Bene Culturale;
import unisa.gps.etour.bean. Bean Convenzione;
import unisa.gps.etour.bean. Bean Menu;
import unisa.gps.etour.bean. Bean News;
import unisa.gps.etour.bean. Bean Operatore Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Piatto;
import unisa.gps.etour.bean. Bean Preferenza Di Ricerca;
import unisa.gps.etour.bean. Bean Preferenze Generiche;
import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.bean. Bean Turista;
import unisa.gps.etour.bean. Bean Visita B C;
import unisa.gps.etour.bean. Bean Visita P R;

/**
 *  Classe per la gestione del controllo della correttezza delle stringhe
 * 
 * @author  Penna  Giuseppe
 * @version  .  &#   ;      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I -
 *           University of  Salerno
 */
public class  Controllo Dati
{

	private final static  String lettere = "abcdefghijklmnopqrstuvxywz"
			+ " A B C D E F G H I J K L M N O P Q R S T U V X Y W Z";
	private final static  String numeri = "          ";

	public final static int  L U N G H E Z Z A_ M A S S I M A =   ;

	/**
	 *  Metodo statico per il controllo di correttezza di una  Stringa
	 * 
	 * @param p Stringa  Stringa da controllare
	 * @param lettere Permesse  Booleano:  True se è consentita la presenza di
	 *            lettere nella stringa,  False altrimenti
	 * @param numeri Permessi  Booleano:  True se è consentita la presenza di
	 *            numeri nella stringa,  False altrimenti
	 * @param caratteri Permessi  Stringa contenente l'insieme dei caratteri
	 *            consentiti nella stringa
	 * @param caratteri Necessari  Stringa contenente l'insieme dei caratteri che
	 *            devono essere presenti nella stringa
	 * @param numero Caratteri Min  Intero rappresentante il numero minimo di
	 *            caratteri consentiti nella stringa
	 * @param numero Caratteri Max  Intero rappresentante il numero massimo di
	 *            caretteri consentiti nella stringa
	 * @return  Booleano:  True se la striga rispetta le condizioni,  False
	 *         altrimenti
	 */
	public static boolean controlla Stringa( String p Stringa,
			boolean lettere Permesse, boolean numeri Permessi,
			 String caratteri Permessi,  String caratteri Necessari,
			int numero Caratteri Min, int numero Caratteri Max)
	{
		//  Caso p Stringa == null: la funzione ritorna falso
		if (p Stringa == null)
			return false;

		int lunghezza Stringa = p Stringa.length();
		 Character carattere Corrente;

		//  Controllo sulla lunghezza della stringa
		if (lunghezza Stringa < numero Caratteri Min
				|| lunghezza Stringa > numero Caratteri Max)
		{
			return false;
		}

		//  Controllo sulla presenza dei caratteri necessari nella stringa
		if (caratteri Necessari != null)
		{
			if (!caratteri Necessari.equals(""))
				for (int i =  ; i < caratteri Necessari.length(); i++)
				{
					carattere Corrente = caratteri Necessari.char At(i);
					if (!p Stringa.contains(carattere Corrente.to String()))
					{
						return false;
					}
				}
		}

		//  Creazione della stringa contenente tutti i caratteri consentiti
		 String stringa Caratteri Permessi = caratteri Permessi
				+ caratteri Necessari + (lettere Permesse ? lettere : "")
				+ (numeri Permessi ? numeri : "");

		//  Ciclo per l'ispezione dei caratteri della stringa da controllare
		for (int i =  ; i < lunghezza Stringa; i++)
		{

			carattere Corrente = p Stringa.char At(i);

			//  Condizione: se il carattere che si sta controllando non è
			// presente nella stringa dei caratteri permessi
			// la stringa è incorretta ed esce dal ciclo.
			if (!(stringa Caratteri Permessi.contains(carattere Corrente
					.to String())))
			{

				return false;
			}
		}

		return true;
	}

	public static  String correggi Stringa( String p Stringa,
			boolean lettere Permesse, boolean numeri Permessi,
			 String caratteri Permessi, int numero Caratteri Max)
	{

		if (p Stringa == null)
			return null;

		 String stringa Caratteri Permessi = caratteri Permessi
				+ (lettere Permesse ? lettere : "")
				+ (numeri Permessi ? numeri : "");

		 Character carattere Corrente;
		int lunghezza Stringa = p Stringa.length();
		int i =  ;

		while (i < lunghezza Stringa)
		{
			carattere Corrente = p Stringa.char At(i);

			if (!(stringa Caratteri Permessi.contains(carattere Corrente
					.to String())))
			{
				p Stringa = p Stringa.replace All("\\"
						+ carattere Corrente.to String(), "");
				lunghezza Stringa = p Stringa.length();

			}
			else
				i++;
		}
		if (lunghezza Stringa > numero Caratteri Max)
		{

			p Stringa = p Stringa.substring( , numero Caratteri Max);
		}

		return p Stringa;
	}

	public static boolean controlla Data( String p Data)
	{
		//  Ancora non ho idea di come mi passeranno la data
		return true;
	}

	public static boolean controlla Date( Date p Data Inizio,  Date p Data Fine)
	{

		boolean ritorno = false;
		if (p Data Inizio != null && p Data Fine != null)
		{

			if (p Data Inizio.before(p Data Fine))
				ritorno = true;
		}

		return ritorno;
	}

	public static boolean check Bean Turista( Bean Turista p Turista)
	{
		if (p Turista != null && p Turista instanceof  Bean Turista)
			return true;
		return false;
	}

	public static boolean check Bean Preferenza Di Ricerca(
			 Bean Preferenza Di Ricerca p Preferenza Di Ricerca)
	{
		if (p Preferenza Di Ricerca != null
				&& p Preferenza Di Ricerca instanceof  Bean Preferenza Di Ricerca)
			return true;
		return true;
	}

	public static boolean check Bean Preferenze Generiche(
			 Bean Preferenze Generiche p Preferenze Generiche)
	{
		if (p Preferenze Generiche != null
				&& p Preferenze Generiche instanceof  Bean Preferenze Generiche)
			return true;
		return false;
	}

	public static boolean check Bean Bene Culturale(
			 Bean Bene Culturale p Bene Culturale)
	{
		if (p Bene Culturale != null
				&& p Bene Culturale instanceof  Bean Bene Culturale)
			return true;
		return false;
	}

	public static boolean check Bean Punto Di Ristoro(
			 Bean Punto Di Ristoro p Punto Di Ristoro)
	{
		if (p Punto Di Ristoro != null
				&& p Punto Di Ristoro instanceof  Bean Punto Di Ristoro)
			return true;
		return false;
	}

	public static boolean check Bean Operatore Punto Di Ristoro(
			 Bean Operatore Punto Di Ristoro p Operatore Punto Di Ristoro)
	{
		if (p Operatore Punto Di Ristoro != null
				&& p Operatore Punto Di Ristoro instanceof  Bean Operatore Punto Di Ristoro)
			return true;
		return false;
	}

	/**
	 *  Effettua il controllo formale e di consistenza sui dati del banner
	 * contenuto nel bean passato per parametro.
	 * 
	 * @author  Palladino  Fabio
	 * @param p Banner bean contenente i dati del banner.
	 * @return  True se i dati del banner sono corretti false altrimenti.
	 */
	public static boolean check Bean Banner( Bean Banner p Banner)
	{
		boolean to Return = false;

		if (p Banner != null && p Banner instanceof  Bean Banner)
		{
			to Return = (p Banner.get Id() >   && p Banner.get Percorso File() != "" && p Banner
					.get Id Punto Di Ristoro() >  );
		}

		return to Return;
	}

	/**
	 *  Metodo che controlla l'immagine contenuta nell'oggetto  Image Icon passato
	 * per parametro.
	 * 
	 * @author  Palladino  Fabio
	 * @param immagine oggetto  Image Icon contenente l'immagine da controllare
	 * @return true se l'immagine contenuta nell'oggetto  Image Icon è una istanza
	 *         della classe  Buffered Image.
	 */
	public static boolean check Immagine( Image Icon immagine)
	{

		if (immagine != null)
		{
			return (immagine.get Image() instanceof  Buffered Image);
		}
		return false;
	}

	/**
	 *  Funzione che controlla i dati di una news;
	 * 
	 * @author  Palladino  Fabio
	 * @param p News bean contenete i dati di una news.
	 * @return
	 */
	public static boolean check Bean News( Bean News p News)
	{
		boolean to Return = false;

		/*  Controllo sulla validità generale del parametro del metodo */
		if (p News != null)
		{

			 Date data Pubb = p News.get Data Pubblicazione(); //  Data di
															// pubblicazione
			 Date data Scad = p News.get Data Scadenza(); //  Data scadenza
			 String news = p News.get News(); //  Testo della  News
			int priority = p News.get Priorita();

			/*  Controllo sulla nullità dei campi */
			if (data Pubb != null && data Scad != null && news != null)
			{
				/*  Controllo sulla coerenza delle date */
				to Return = data Pubb.before(data Scad);
				/*  Controlla che il testo non sia vuoto */
				to Return = to Return && (news != "");
				/*  Controlla che l'id sia maggiore di   */
				to Return = to Return && (p News.get Id() >  );
				/*  Controlla il valore della priorità */
				to Return = to Return
						&& (priority <=  Costanti Globali. M A X_ P R I O R I T Y_ N E W S)
						&& (priority >=  Costanti Globali. M I N_ P R I O R I T Y_ N E W S);
			}
		}
		return to Return;
	}

	public static boolean check Bean Tag( Bean Tag p Tag)
	{
		if (p Tag != null && p Tag instanceof  Bean Tag)
			return true;
		return false;
	}

	public static boolean check Bean Convenzione( Bean Convenzione p Convenzione)
	{
		if (p Convenzione != null && p Convenzione instanceof  Bean Convenzione)
			return true;
		return false;
	}

	public static boolean check Bean Menu( Bean Menu p Menu)
	{
		if (p Menu != null && p Menu instanceof  Bean Menu)
			return true;
		return false;
	}

	public static boolean check Bean Piatto( Bean Piatto p Piatto)
	{
		if (p Piatto != null && p Piatto instanceof  Bean Piatto)
			return true;
		return false;
	}

	public static boolean check Bean Visita B C( Bean Visita B C p Visita B C)
	{
		if (p Visita B C != null && p Visita B C instanceof  Bean Visita B C)
			return true;
		return false;
	}

	public static boolean check Bean Visita P R( Bean Visita P R p Visita P R)
	{
		if (p Visita P R != null && p Visita P R instanceof  Bean Visita P R)
			return true;
		return false;
	}
}
