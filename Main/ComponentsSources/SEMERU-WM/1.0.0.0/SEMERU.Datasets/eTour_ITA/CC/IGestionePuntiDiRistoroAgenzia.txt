package unisa.gps.etour.control. Gestione Punti Di Ristoro;

import java.rmi. Remote Exception;
import java.util. Array List;
import java.util. Hash Map;

import unisa.gps.etour.bean. Bean Convenzione;
import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Visita P R;

/**
 *  Interfaccia di  Punti di  Ristoro dal lato dell'agenzia
 * 
 * @author  Morelli  Giuseppe
 * @version  .  ©      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I –  University
 *          of  Salerno
 */
public interface  I Gestione Punti Di Ristoro Agenzia extends
		 I Gestione Punti Di Ristoro Comune
{

	/**
	 *  Metodo per l'inserimento di un nuovo  Punto di  Ristoro
	 * 
	 * @param p Punto Di Ristoro contenente tutti i dati del  Punto di  Ristoro da
	 *            aggiungere
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean inserisci Punto Di Ristoro( Bean Punto Di Ristoro p Punto Di Ristoro)
			throws  Remote Exception;

	/**
	 *  Metodo per la cancellazione di un  Punto di  Ristoro tramite l' I D
	 * 
	 * @param p I D Punto Di Ristoro per l'identificazione univoca del  Punto di
	 *             Ristoro
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean cancella Punto Di Ristoro(int p Punto Di Ristoro I D)
			throws  Remote Exception;

	/**
	 *  Metodo per la restituzione di tutti i  Punti di  Ristoro del  Data Base
	 * 
	 * @return  Array List contenente tutti i bean dei  Punti di  Ristoro presenti
	 *         nel  Data Base
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public  Array List< Bean Punto Di Ristoro> ottieni Punti Di Ristoro()
			throws  Remote Exception;

	/**
	 *  Metodo per la restituzione di tutti i punti di ristoro con convenzione
	 * attiva o meno
	 * 
	 * @param stato Convenzione  Booleano per il tipo di  Punti di  Ristoro da
	 *            ottenere (convenzionati o meno)
	 * @return  Array List contenente tutti i bean dei  Punti di  Ristoro presenti
	 *         nel  Data Base a seconda dello stato della convenzione
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public  Array List< Bean Punto Di Ristoro> ottieni Punti Di Ristoro(
			boolean stato Convenzione) throws  Remote Exception;

	/**
	 *  Metodo per l'inserimento di una nuova convenzione per un certo  Punto di
	 *  Ristoro
	 * 
	 * @param p Punto Di Ristoro I D  Intero che identifica univocamente il  Punto di
	 *             Ristoro
	 * @param p Conv  Convenzione che si intende attivare ( Il parametro  I D del
	 *            punto di ristoro crea ridondanza ma è utile per la sicurezza
	 *            dei dati)
	 * @return  Booleano per conferma dell'avvenuta operazione
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean attiva Convenzione(int p Punto Di Ristoro I D,
			 Bean Convenzione p Conv) throws  Remote Exception;

	/**
	 *  Metodo per ottenere tutti i feedback associati ad un certo  Punto di
	 *  Ristoro
	 * 
	 * @param p Punto Di Ristoro I D  Identificativo univoco del  Punto  Di  Ristoro di
	 *            cui ottenere i feedback
	 * @return  Hash Map contenente come chiave i bean dei feedback e come valore
	 *         il turista che ha rilasciato il feedback
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public  Hash Map< Bean Visita P R,  String> ottieni Feedback Punto Di Ristoro(
			int p Punto Di Ristoro I D) throws  Remote Exception;

	/**
	 *  Metodo per l'aggiornamento (o modifica) dei dati di un  Punto di  Ristoro
	 * 
	 * @param p Punto Di Ristoro I D per l'identificazione univoca del  Punto di
	 *             Ristoro da modificare
	 * @param p Punto Di Ristoro Aggiornato contenente i nuovi dati da salvare
	 * @return  Booleano con valore true se l'operazione è andata a buon fine,
	 *         false altrimenti
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean modifica Punto Di Ristoro(
			 Bean Punto Di Ristoro p Punto Di Ristoro Aggiornato)
			throws  Remote Exception;

	/**
	 *  Metodo che permette di inserire un  Tag utile alla ricerca per un  Punto di
	 *  Ristoro
	 * 
	 * @param p Punto Di Ristoro Id  Identificativo univoco del  Punto  Di  Ristoro
	 * @param p Tag Id  Identificativo univoco del  Tag da inserire
	 * @return  Booleano con valore true se l'operazione è andata a buon fine,
	 *         false altrimenti
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean inserisci Tag Punto Di Ristoro(int p Punto Di Ristoro Id, int p Tag Id)
			throws  Remote Exception;

	/**
	 *  Metodo che permette di cancellare un  Tag utile alla ricerca per un  Punto
	 *  Di  Ristoro
	 * 
	 * @param p Punto Di Ristoro Id  Identificativo univoco del  Punto  Di  Ristoro
	 * @param p Tag Id  Identificativo univoco del  Tag da inserire
	 * @return  Booleano con valore true se l'operazione è andata a buon fine,
	 *         false altrimenti
	 * @throws  Remote Exception  Eccezione  Remota
	 */
	public boolean cancella Tag Punto Di Ristoro(int p Punto Di Ristoro Id, int p Tag Id)
			throws  Remote Exception;

}
