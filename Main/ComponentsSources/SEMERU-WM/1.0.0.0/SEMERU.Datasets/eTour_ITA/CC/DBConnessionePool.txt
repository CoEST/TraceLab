package unisa.gps.etour.repository;

import java.sql. Connection;
import java.sql. Driver Manager;
import java.sql. S Q L Exception;
import java.util. Array List;
import java.util. List;

/**
 *  Classe che realizza la connessione con il database utilizzando jdbc e
 * consente di eseguire query sia di lettura che di modifica del contenuto del
 * database.  E' implementata per fornire un pool di connessioni in modo da
 * fornire una connessione ad ogni thread.
 * 
 * @author  Miranda  Mauro
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */
public class  D B Connessione Pool
{
	private final static  String driver = "com.mysql.jdbc. Driver";
	private final static  String url Connessione = "jdbc:mysql://localhost/e Tour?user=mauro&password=mauro";
	private static  List< Connection> connessioni Libere;

	/*  Costruttore privato che avvia la connessione con il database */

	/*
	 *  Blocco di inizializzazione statico utilizzato per caricare il driver in
	 * memoria
	 */
	static
	{
		connessioni Libere = new  Array List< Connection>();
		try
		{
			 Class.for Name(driver);
		}
		catch ( Class Not Found Exception e)
		{
			e.print Stack Trace();
		}
	}

	/**
	 *  Metodo per ottenere la connessione al server.
	 * 
	 * @return  Restituisce la connessione al database
	 * @throws  S Q L Exception
	 */
	public static synchronized  Connection ottieni Connessione()
			throws  S Q L Exception
	{
		 Connection connection;

		if (!connessioni Libere.is Empty())
		{
			//  Extract a connection from the free db connection queue
			connection = connessioni Libere.get( );
			 D B Connessione Pool.connessioni Libere.remove( );

			try
			{
				//  If the connection is not valid, a new connection will be
				// analyzed
				if (connection.is Closed())
					connection =  D B Connessione Pool.ottieni Connessione();
			}
			catch ( S Q L Exception e)
			{
				connection =  D B Connessione Pool.ottieni Connessione();
			}
		}
		else
			//  The free db connection queue is empty, so a new connection will
			// be created
			connection =  D B Connessione Pool.crea D B Connessione();

		return connection;
	}

	public static void rilascia Connessione( Connection p Released Connection)
	{
		//  Add the connection to the free db connection queue
		 D B Connessione Pool.connessioni Libere.add(p Released Connection);
	}

	private static  Connection crea D B Connessione() throws  S Q L Exception
	{
		 Connection nuova Connessione = null;
		//  Create a new db connection using the db properties
		nuova Connessione =  Driver Manager.get Connection(url Connessione);
		nuova Connessione.set Auto Commit(true);
		return nuova Connessione;
	}
}
