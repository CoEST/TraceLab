package unisa.gps.etour.control. Gestione Punti Di Ristoro;

import java.rmi. Remote Exception;
import java.rmi.server. Unicast Remote Object;
import java.sql. S Q L Exception;
import java.util. Array List;
import java.util. Date;
import java.util. Iterator;
import unisa.gps.etour.bean. Bean Punto Di Ristoro;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.bean. Bean Visita P R;
/*
 *  Per i test di junit import
 * unisa.gps.etour.control. Gestione Punti Di Ristoro.test.stub. D B Punto Di Ristoro;
 * import unisa.gps.etour.control. Gestione Punti Di Ristoro.test.stub. D B Visita P R;
 */
import unisa.gps.etour.repository. D B Punto Di Ristoro;
import unisa.gps.etour.repository. D B Visita P R;
import unisa.gps.etour.repository. D B Tag;
import unisa.gps.etour.repository. I D B Punto Di Ristoro;
import unisa.gps.etour.repository. I D B Tag;
import unisa.gps.etour.repository. I D B Turista;
import unisa.gps.etour.repository. I D B Visita P R;
import unisa.gps.etour.util. Costanti Globali;
import unisa.gps.etour.util. Messaggi Errore;

/**
 *  Classe che implementa le operazioni comuni per l' Operatore  Punto di  Ristoro e
 * per l' Operatore  Agenzia
 * 
 * @author  Morelli  Giuseppe
 * @version  .  &#   ;      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I -
 *           University of  Salerno
 */
public class  Gestione Punti Di Ristoro Comune extends  Unicast Remote Object implements
		 I Gestione Punti Di Ristoro Comune
{

	//  Istanze per le connessioni al database
	private static final long serial Version U I D =   L;
	protected  I D B Punto Di Ristoro punto Ristoro;
	protected  I D B Tag tag;
	protected  I D B Visita P R feed;
	protected  I D B Turista db Turista;

	public  Gestione Punti Di Ristoro Comune() throws  Remote Exception
	{
		super();
		//  Connessione al  Database
		try
		{
			punto Ristoro = new  D B Punto Di Ristoro();
			tag = new  D B Tag();
			feed = new  D B Visita P R();
		}
		//  A T T E N Z I O N E:  Non viene piu' generata  S Q L Exception causa
		// modifiche al layer  D B; modificato in  Exception
		catch ( Exception e)
		{
			 System.out.println(" Errore:" + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
	}

	/*
	 *  Metodo che permette di ottenere un  Bean Punto Di Ristoro tramite la
	 * connessione al database
	 */
	public  Bean Punto Di Ristoro ottieni Punto Di Ristoro(int p Punto Di Ristoro I D)
			throws  Remote Exception
	{
		//  Controllo sull'identificativo passato
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Istanza di ritorno
		 Bean Punto Di Ristoro to Return = null;
		try
		{
			//  Ricavo i dati attraverso l'istanza della connessione al database
			to Return = punto Ristoro.ottieni Punto Di Ristoro(p Punto Di Ristoro I D);
		}
		//  Eccezione nelle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore:" + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore:" + ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo la variabile di ritorno, in modo da non passare dati errati
		// al chiamante
		// e nel caso scatena un'eccezione sul formato del bean
		if (to Return == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Ritorno il bean contenente le informazioni sul  Punto di  Ristoro
		// richiesto
		return to Return;
	}

	//  Metodo che ritorna un  Array List contenente i tag identificativi di un
	// certo  Punto di  Ristoro
	public  Array List< Bean Tag> ottieni Tag Punto Di Ristoro(int p Punto Di Ristoro I D)
			throws  Remote Exception
	{
		//  Controllo sull'identificativo passato
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Istanza di ritorno
		 Array List< Bean Tag> to Return = null;
		try
		{
			//  Ricavo i dati attraverso l'istanza della connessione al database
			to Return = tag.ottieni Tag Punto Di Ristoro(p Punto Di Ristoro I D);
		}
		//  Eccezione nelle operazioni sul database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore:" + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore:" + ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Controllo la variabile di ritorno, in modo da non passare dati errati
		// al chiamante
		// e nel caso scatena un'eccezione sul formato del bean
		if (to Return == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Ritorno l' Array List contenente i bean dei tag del punto di ristoro
		// passato come parametro
		return to Return;
	}

	//  Restituisce un array di    stringhe contenenti gli ultimi    commenti
	// rilasciati dai  Turisti per il  Punto di  Ristoro passato come parametro
	public  String[] ottieni Ultimi Commenti(int p Punto Di Ristoro I D)
			throws  Remote Exception
	{
		//  Controllo la validità dell'identificativo passato
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Stringa che conterrà solo gli ultimi    commenti rilasciati
		 String[] to Return = new  String[  ];
		//  Array List temporaneo per salvare poi i commenti dei bean contenuti al
		// suo interno
		 Array List< Bean Visita P R> temp = null;
		try
		{
			//  Cerco di recuperare le informazioni dal database tramite
			// l'istanza della connessione
			temp = feed.ottieni Lista Visita P R(p Punto Di Ristoro I D);
		}
		//  Eccezione nelle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo ottieni Ultimi Commenti: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo ottieni Ultimi Commenti: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  I bean che ricevo dal database sono già ordinati per data
		// implicitamente, quindi non c'è bisogno di algoritmi di ordinamento
		for (int i =  ; i <   ; i++)
		{
			//  Inserisco ciclicamente il testo dei commenti all'interno
			// dell'array
			to Return[i] = (temp.get(temp.size() - (i +  ))).get Commento();
		}
		//  E' inutile un controllo sul formato dell'array
		//  Quindi ritorno direttamente l'array con i commenti
		return to Return;
	}

	//  Metodo che restituisce un  Array List contenente il numero di voti
	// rilasciati da   a   per
	// il  Punto di  Ristoro passato come parametro.  Il metodo inserisce in ordine
	// i contatori nelle posizioni
	// a partire da   per il voto  ,   per il voto  , etc..
	public  Array List< Integer> ottieni Statistiche Punto Di Ristoro(
			int p Punto Di Ristoro I D) throws  Remote Exception
	{
		//  Controllo la validità dell'identificativo passato
		if (p Punto Di Ristoro I D <  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Array List che mi permette di memorizzare i bean contenenti i feedback
		 Array List< Bean Visita P R> b Visita = null;
		//  Array List che mi permette di memorizzare i contatori
		// e che poi ritornerò al metodo chiamante
		 Array List< Integer> lista Risultati = new  Array List< Integer>( );
		//  Inizializzazione dell'array di contatori
		for (int i =  ; i <  ; i++)
			lista Risultati.add( Integer.value Of( ));
		//  Data utile a verificare che i feedback rilasciati risalgano a trenta
		// giorni dalla data corrente
		 Date ultimi Trenta Giorni = new  Date(new  Date().get Time()
				-  Costanti Globali. T R E N T A_ G I O R N I);

		 System.out.println(" La data di    gg fa è : " + ultimi Trenta Giorni);

		try
		{
			//  Ricavo tutti i feedback rilasciati per il  Punto di  Ristoro
			// passato come parametro
			b Visita = feed.ottieni Lista Visita P R(p Punto Di Ristoro I D);
			//  Itero la collezione di elementi per controllare i bean delle
			// visite
			for ( Iterator< Bean Visita P R> iteratore Visita P R = b Visita.iterator(); iteratore Visita P R
					.has Next();)
			{
				//  Recuperto il  Bean Visita P R
				 Bean Visita P R b Visita Temp = iteratore Visita P R.next();
				// ...non si sa che fa...
				 System.out.println(" La data di questa visita è: "
						+ b Visita Temp.get Data Visita());
				if (b Visita Temp.get Data Visita().after(ultimi Trenta Giorni))
					lista Risultati.set(b Visita Temp.get Voto() -  ,  Integer
							.value Of(lista Risultati.get(
									b Visita Temp.get Voto() -  ).int Value() +  ));
			}
		}
		//  Eccezione nelle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out
					.println(" Errore nel metodo ottieni Statistiche Punto Di Ristoro: "
							+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste determinate da altri fattori
		catch ( Exception ee)
		{
			 System.out
					.println(" Errore nel metodo ottieni Statistiche Punto Di Ristoro: "
							+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		if (lista Risultati == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Ritorno la lista dei risultati che dovrebbe contenere i contatori dei
		// commenti
		// rilasciati negli ultimi    gg
		return lista Risultati;
	}

	//  Metodo che permette di modificare il commento rilasciato per un certo
	//  Punto di  Ristoro
	public boolean modifica Feedback Punto Di Ristoro(int p Punto Di Ristoro Id,
			 Bean Visita P R nuova Visita) throws  Remote Exception
	{
		//  Controllo la validità dei dati passati
		if ((p Punto Di Ristoro Id <  ) || (!(nuova Visita instanceof  Bean Visita P R)))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Ricavo dal database il bean precedentemente salvato e lo memorizzo
		// in modo da verificare che non sia stato modificato il voto
		// che era stato rilasciato in precedenza
		 Bean Visita P R temp = null;
		try
		{
			temp = feed.ottieni Visita P R(p Punto Di Ristoro Id, nuova Visita
					.get Id Turista());
		}
		//  Eccezione nell'esecuzione dell'operazione sul  Database
		catch ( S Q L Exception e)
		{
			 System.out
					.println(" Errore nel metodo modifica Feedback Punto Di Ristoro: "
							+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezione imprevista causata da altri fattori
		catch ( Exception ee)
		{
			 System.out
					.println(" Errore nel metodo modifica Feedback Punto Di Ristoro: "
							+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		//  Se il voto è stato modificato restituisco una eccezione
		if (temp.get Voto() != nuova Visita.get Voto())
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		//  Se il voto non è stato modificato provvedo a salvare il nuovo
		// commento nel database tramite l'apposito metodo del bean
		else
		{
			try
			{
				feed.modifica Visita P R(nuova Visita);
				return true;
			}
			//  Eccezione nell'esecuzione dell'operazione sul  Database
			catch ( S Q L Exception e)
			{
				 System.out
						.println(" Errore nel metodo modifica Feedback Punto Di Ristoro: "
								+ e.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
			}
			//  Eccezione imprevista causata da altri fattori
			catch ( Exception ee)
			{
				 System.out
						.println(" Errore nel metodo modifica Feedback Punto Di Ristoro: "
								+ ee.to String());
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
			}
		}
	}
}
