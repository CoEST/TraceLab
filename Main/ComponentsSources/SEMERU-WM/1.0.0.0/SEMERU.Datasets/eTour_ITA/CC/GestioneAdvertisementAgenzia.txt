/**
 *  Implementazione dell'interfaccia di gestione dell'advertisement
 * per l'operatore agenzia.  Contiene i metodi di gestione delle 
 * news.
 *
 * @author  Palladino  Fabio
 * @version  . 
 * 
 * �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University of  Salerno
 */
package unisa.gps.etour.control. Gestione Advertisement;

import java.rmi. Remote Exception;
import java.sql. S Q L Exception;
import java.util. Array List;

import unisa.gps.etour.bean. Bean News;
/* importazione dello stub */ 
//import unisa.gps.etour.control. Gestione Advertisement.test.stubs. D B News;
import unisa.gps.etour.repository. D B News;
import unisa.gps.etour.repository. I D B News;
import unisa.gps.etour.util. Controllo Dati;
import unisa.gps.etour.util. Costanti Globali;
import unisa.gps.etour.util. Messaggi Errore;


public class  Gestione Advertisement Agenzia extends  Gestione Advertisement
		implements  I Gestione Advertisement Agenzia
{
	private static final long serial Version U I D =   L;
	/** contiene i metodi per gestione delle news nel database */
	private  I D B News db News;
	
	/**
	 *  Costruttore.  Istanzia un oggetto di tipo {@link unisa.gps.etour.repository. D B News}.
	 * 
	 * @throws  Remote Exception
	 */
	public  Gestione Advertisement Agenzia() throws  Remote Exception
	{
		super();
		db News = new  D B News();
	}
	
	/**
	 *  Metodo che cancella una news dal database.  Utilizza il metodo
	 * {@link boolean unisa.gps.etour.repository. I D B News#cancella News(int)}
	 * 
	 * @param p News I D id della news da cancellare.
	 * @return true se la cancellazione è andata a buon fine false altrimenti.
	 * @throws  Remote Exception
	 * 
	 */
	public boolean cancella News(int p News I D) throws  Remote Exception
	{
		
		try 
		{
			/* controlla che l'id sia valido */
			if(p News I D >  ){
				return (db News.cancella News(p News I D));
			}else{
				return false;
			}		
		} catch ( S Q L Exception e) {
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
	}	
	
	/**
	 *  Inserisce una nuova news nel database.
	 *  Utilizza il metodo {@link  unisa.gps.etour.repository. I D B News#inserisci News( Bean News)}
	 * per  inserire la news e il metodo {@link  unisa.gps.etour.repository. I D B News#ottieni News()}
	 * per contare il numero di news presenti nel sistema.
	 *
	 * @param p News bean contenente i dati della news.
	 * @return true se l'inserimento va a buon fine, false se è stato 
	 * raggiunto il numero massimo di news memorizzabili o se l'inserimento non ha successo.
	 * @throws  Remote Exception
	 */
	public boolean inserisci News( Bean News p News) throws  Remote Exception
	{
		try 
		{
			/* controlla i dati della news */
			if (! Controllo Dati.check Bean News(p News)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			/* controlla che non sia stato superato il num. max di news memorizzabili */
			int num News = db News.ottieni News().size();
			if(num News <  Costanti Globali. M A X_ N E W S_ A T T I V E){
				/* inserimento possibile */
				return (db News.inserisci News(p News));
			}else{
				/* inserimento non possibile */
				return false;
			}		
		} catch ( S Q L Exception e) {
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
	}
	
	/**
	 *  Metodo che modifica i dati di una news.
	 *  Utilizza il metodo {@link unisa.gps.etour.repository. I D B News#modifica News( Bean News)}.
	 * 
	 * @param p News bean contenente i dati della news modificata.
	 * @return true se la modifica va a buon fine.
	 * @throws  Remote Exception 
	 */
	public boolean modifica News( Bean News p News) throws  Remote Exception
	{
		
		try 
		{
			/* controlla i dati della news */
			if (! Controllo Dati.check Bean News(p News)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			return (db News.modifica News(p News));		
		} catch ( S Q L Exception e) {
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}		
	}
	
	/**
	 *  Metodo che restituisce un array contenente tutte le news memorizzate nel sistema.
	 *  Utilizza il metodo {@link unisa.gps.etour.repository. I D B News#ottieni News()}.
	 * 
	 * @return  Array List contenente i bean delle news.
	 * @throws  Remote Exception  
	 */
	public  Array List< Bean News> ottieni All News() throws  Remote Exception
	{
		
		try 
		{			
			return (db News.ottieni News());		
		} catch ( S Q L Exception e) {
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
	}
}
