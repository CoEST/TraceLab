package unisa.gps.etour.repository;

import java.sql. Connection;
import java.sql. Result Set;
import java.sql. S Q L Exception;
import java.sql. Statement;
import java.util. Array List;

import unisa.gps.etour.bean. Bean Preferenza Di Ricerca;

/**
 *  Classe che implementa l'interfaccia  Preferenze Di Ricerca
 * 
 * @author  Martone  Giuseppe
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */
public class  D B Preferenze Di Ricerca implements  I D B Preferenze Di Ricerca
{
	//  Costruttore vuoto
	public  D B Preferenze Di Ricerca()
	{
	}

	public boolean cancella Preferenza Di Ricerca(int p Id Preferenza)
			throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di cancellazione
			 String query = " D E L E T E  F R O M preferenze di ricerca   W H E R E  Id ="
					+ p Id Preferenza;
			//  Si esegue la query di  Cancellazione
			int i = stat.execute Update(query);
			//  Si restituisce il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public boolean cancella Preferenza Di Ricerca B C(int p Id Bene Culturale,
			int p Id Preferenza Di Ricerca) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di cancellazione
			 String query = " D E L E T E  F R O M associazione bene culturale   W H E R E  Id Preferenze Di Ricerca = "
					+ p Id Preferenza Di Ricerca
					+ "  A N D  Id Bene Culturale = "
					+ p Id Bene Culturale;
			//  Si esegue la query di  Cancellazione
			int i = stat.execute Update(query);
			//  Si restituisce il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public boolean cancella Preferenza Di Ricerca P R(int p Id Punto Di Ristoro,
			int p Id Preferenza) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di cancellazione
			 String query = " D E L E T E  F R O M associazione punto di ristoro   W H E R E  Id Preferenze Di Ricerca = "
					+ p Id Preferenza
					+ "  A N D  Id Punto Di Ristoro =  "
					+ p Id Punto Di Ristoro;
			//  Si esegue la query di  Cancellazione
			int i = stat.execute Update(query);
			//  Si restituisce il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}

	}

	public boolean cancella Preferenza Di Ricerca Turista(int p Id Turista,
			int p Id Preferenza) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query di cancellazione
			 String query = " D E L E T E  F R O M gradimento  W H E R E  Id Turista = "
					+ p Id Turista + "  A N D  Id Preferenze Di Ricerca =  "
					+ p Id Preferenza;
			//  Si esegue la query di  Cancellazione
			int i = stat.execute Update(query);
			//  Si restituisce il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}

	}

	public boolean inserisci Preferenza Di Ricerca Del B C(int p Id Bene Culturale,
			int p Id Preferenza Di Ricerca) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'inserimento
			 String query = " I N S E R T  I N T O associazione bene culturale ( Id Preferenze Di Ricerca,  Id Bene Culturale)  V A L U E S ("
					+ p Id Preferenza Di Ricerca + " ," + p Id Bene Culturale + ")";
			//  Si esegue la query di  Inserimento
			int i = stat.execute Update(query);
			//  Si ritorna il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}

	}

	public boolean inserisci Preferenza Di Ricerca(
			 Bean Preferenza Di Ricerca p Preferenza) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'inserimento
			 String query = " I N S E R T  I N T O preferenze di ricerca ( Id,  Nome)  V A L U E S ("
					+ p Preferenza.get Id() + " ,'" + p Preferenza.get Nome()
					+ "')";
			//  Si esegue la query di  Inserimento
			int i = stat.execute Update(query);
			//  Si ritorna il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public boolean inserisci Preferenza Di Ricerca Del P R(int p Id Punto Di Ristoro,
			int p Id Preferenza Di Ricerca) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'inserimento
			 String query = " I N S E R T  I N T O associazione punto di ristoro ( Id Preferenze Di Ricerca,  Id Punto Di Ristoro)  V A L U E S ("
					+ p Id Preferenza Di Ricerca + " ," + p Id Punto Di Ristoro + ")";
			//  Si esegue la query di  Inserimento
			int i = stat.execute Update(query);
			//  Si ritorna il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public boolean inserisci Preferenza Di Ricerca Del Turista(int p Id Turista,
			int p Id Preferenza Di Ricerca) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'inserimento
			 String query = " I N S E R T  I N T O gradimento( Id Turista,  Id Preferenze Di Ricerca)  V A L U E S ("
					+ p Id Turista + " ," + p Id Preferenza Di Ricerca + ")";
			//  Si esegue la query di  Inserimento
			int i = stat.execute Update(query);
			//  Si ritorna il backup
			return (i ==  );
		}
		//  Viene eseguito sempre e si occupa di chiudere lo  Statement e la
		//  Connessione
		finally
		{
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public  Array List< Bean Preferenza Di Ricerca> ottieni Preferenze Di Ricerca Del B C(
			int p Id Bene Culturale) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set result = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'estrazione della lista delle preferenze di ricerca di
			// un bene culturale
			 String query = " S E L E C T *  F R O M associazione bene culturale ,preferenze di ricerca   W H E R E  Id Bene Culturale = "
					+ p Id Bene Culturale
					+ "  A N D  Id Preferenze Di Ricerca = preferenze di ricerca . Id ";
			//  Viene eseguita la query
			result = stat.execute Query(query);
			//  Lista che conterrà i  Bean Preferenza Di Ricerca
			 Array List< Bean Preferenza Di Ricerca> lista = new  Array List< Bean Preferenza Di Ricerca>();
			//  Si estraggono i risultati dal result set e si inseriscono nella
			// lista
			// da restituire
			while (result.next())
			{
				//  Aggiungo i  Bean Preferenza Di Ricerca alla lista
				lista.add(new  Bean Preferenza Di Ricerca(result.get Int(" Id"),
						result.get String(" Nome")));
			}
			return lista;
		}
		//  Viene eseguito sempre e si occupa di chiudere il  Result, lo  Statement
		// e la  Connessione
		finally
		{
			if (result != null)
			{
				result.close();
			}
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}

	}

	public  Array List< Bean Preferenza Di Ricerca> ottieni Preferenze Di Ricerca Del P R(
			int p Id Punto Di Ristoro) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set result = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'estrazione della lista delle preferenze di ricerca di
			// un punto di ristoro
			 String query = " S E L E C T *  F R O M associazione punto di ristoro ,preferenze di ricerca   W H E R E  Id Punto Di Ristoro = "
					+ p Id Punto Di Ristoro
					+ "  A N D  Id Preferenze Di Ricerca = preferenze di ricerca . Id ";
			//  Viene eseguita la query
			result = stat.execute Query(query);
			//  Lista che conterrà i  Bean Preferenza Di Ricerca
			 Array List< Bean Preferenza Di Ricerca> lista = new  Array List< Bean Preferenza Di Ricerca>();
			//  Si estraggono i risultati dal result set e si inseriscono nella
			// lista
			// da restituire
			while (result.next())
			{
				//  Aggiungo i  Bean Preferenza Di Ricerca alla lista
				lista.add(new  Bean Preferenza Di Ricerca(result.get Int(" Id"),
						result.get String(" Nome")));
			}
			return lista;
		}
		//  Viene eseguito sempre e si occupa di chiudere il  Result, lo  Statement
		// e la  Connessione
		finally
		{
			if (result != null)
			{
				result.close();
			}
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}

	}

	public  Array List< Bean Preferenza Di Ricerca> ottieni Preferenze Di Ricerca Del Turista(
			int p Id Turista) throws  S Q L Exception
	{
		//  Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set result = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'estrazione della lista delle preferenze di ricerca di
			// un  Turista
			 String query = " S E L E C T *  F R O M gradimento,preferenze di ricerca   W H E R E  Id Turista = "
					+ p Id Turista
					+ "  A N D  Id Preferenze Di Ricerca = preferenze di ricerca . Id ";
			//  Viene eseguita la query
			result = stat.execute Query(query);
			//  Lista che conterrà i  Bean Preferenza Di Ricerca
			 Array List< Bean Preferenza Di Ricerca> lista = new  Array List< Bean Preferenza Di Ricerca>();
			//  Si estraggono i risultati dal result set e si inseriscono nella
			// lista
			// da restituire
			while (result.next())
			{
				//  Aggiungo i  Bean Preferenza Di Ricerca alla lista
				lista.add(new  Bean Preferenza Di Ricerca(result.get Int(" Id"),
						result.get String(" Nome")));
			}
			return lista;
		}
		//  Viene eseguito sempre e si occupa di chiudere il  Result, lo  Statement
		// e la  Connessione
		finally
		{
			if (result != null)
			{
				result.close();
			}
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}

	public  Array List< Bean Preferenza Di Ricerca> ottieni Preferenze Di Ricerca()
			throws  S Q L Exception
	{
		// Variabile per la connessione al database
		 Connection conn = null;
		//  Variabile per le query
		 Statement stat = null;
		//  Variabile per i risultati delle query
		 Result Set result = null;
		try
		{
			//  Ottengo la connessione
			conn =  D B Connessione Pool.ottieni Connessione();
			//  Creazione dello  Statement
			stat = conn.create Statement();
			//  Query per l'estrazione della lista delle preferenze di ricerca di
			// un  Turista
			 String query = " S E L E C T *  F R O M preferenze di ricerca  ";
			// Viene eseguita la query
			result = stat.execute Query(query);
			//  Lista che conterrà i  Bean Preferenza Di Ricerca
			 Array List< Bean Preferenza Di Ricerca> lista = new  Array List< Bean Preferenza Di Ricerca>();
			//  Si estraggono i risultati dal result set e si inseriscono nella
			// lista
			// da restituire
			while (result.next())
			{
				//  Aggiungo i  Bean Preferenza Di Ricerca alla lista
				lista.add(new  Bean Preferenza Di Ricerca(result.get Int(" Id"),
						result.get String(" Nome")));
			}
			// Restituisco la lista delle preferenze di ricerca presenti nel  D B
			return lista;
		}
		// Viene eseguito sempre e si occupa di chiudere il  Result, lo  Statement
		// e la  Connessione
		finally
		{
			if (result != null)
			{
				result.close();
			}
			if (stat != null)
			{
				stat.close();
			}
			if (conn != null)
			{
				 D B Connessione Pool.rilascia Connessione(conn);
			}
		}
	}
}
