/**
 *  Classe che implementa l'interfaccia generale
 * della gestione dell'advertisement.
 *
 * @author  Palladino  Fabio
 * @version  . 
 * 
 * �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University of  Salerno
 */
package unisa.gps.etour.control. Gestione Advertisement;

import java.awt.image. Buffered Image;
import java.io. File;
import java.io. I O Exception;
import java.rmi. Remote Exception;
import java.rmi.server. Unicast Remote Object;
import java.sql. S Q L Exception;
import java.util. Array List;
import java.util. Hash Map;

import javax.imageio. Image I O;
import javax.swing. Image Icon;

import unisa.gps.etour.bean. Bean Banner;
import unisa.gps.etour.bean. Bean Convenzione;
import unisa.gps.etour.repository. D B Banner;
//import unisa.gps.etour.control. Gestione Advertisement.test.stubs.*;
import unisa.gps.etour.repository. D B Convenzione;
import unisa.gps.etour.repository. I D B Banner;
import unisa.gps.etour.repository. I D B Convenzione;
import unisa.gps.etour.util. Controllo Dati;
import unisa.gps.etour.util. Costanti Globali;
import unisa.gps.etour.util. Messaggi Errore;

public class  Gestione Advertisement extends  Unicast Remote Object implements
		 I Gestione Advertisement
{
	private static final long serial Version U I D =   L;
	/**  Oggetto che gestisce le operazioni sui banner*/
	private  I D B Banner db Banner;
	/**
	 *  Costruttore, istanzia un oggetto di tipo  D B Banner che 
	 * contiene i metodi che effettuano le operazioni sui dati
	 * dell'entità banner. 
	 * 
	 * @throws  Remote Exception
	 */
	public  Gestione Advertisement() throws  Remote Exception
	{
		super();
		db Banner = new  D B Banner();		
	}
	/**
	 *  Elimina un banner e l'immagine associata dal sistema.
	 * 
	 * @param	p Banner I D id del banner da eliminare
	 * @throws  Remote Exception
	 */
	public boolean cancella Banner(int p Id Banner) throws  Remote Exception
	{
		/* bean contenente i dati del banner */
		 Bean Banner banner;
		
		try 
		{
			/*  Carica il banner e ne controlla i dati */
			banner = db Banner.ottieni Banner Da I D(p Id Banner);
			if(! Controllo Dati.check Bean Banner(banner)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			/* cancella l'immagine associata al banner */
			 File immagine = new  File(banner.get Percorso File());
			immagine.delete();
			/*  Cancella l'intero bean del banner*/
			return (db Banner.cancella Banner(p Id Banner));
		} 
		catch ( S Q L Exception e) {
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
	}
	/**
	 *  Metodo che modifica l'immagine associata al banner: 
	 * cancella la vecchia immagine e memorizza la nuova, 
	 * sfruttando lo stesso percorso della vecchia immagine.
	 * 
	 *  @param p Banner I D id del banner
	 *  @param p Immagine oggetto  Image Icon contenente la nuova immagine del banner
	 *  @return restituisce true se l'operazione ha successo
	 */
	public boolean modifica Banner(int p Banner I D, Image Icon p Immagine) throws  Remote Exception
	{
			
		try
		{
			/* effettua un controllo sull'immagine del banner */
			if(! Controllo Dati.check Immagine(p Immagine)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			/* carica l'immagine dell'icona */
			 Buffered Image buff Img = ( Buffered Image) p Immagine.get Image();
			/* carica i dati del banner */
			 Bean Banner banner = db Banner.ottieni Banner Da I D(p Banner I D);
			/*  Controllo sui dati del banner caricato*/
			if(! Controllo Dati.check Bean Banner(banner)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			/* riscrive l'immagine nel file e ritorna il risultato dell'operazione */
			 File img File = new  File(banner.get Percorso File());
			return ( Image I O.write(buff Img,"jpg",img File));
		}
		catch( S Q L Exception e){
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
		catch( I O Exception e){
			if(e instanceof  Remote Exception)
			{
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}else
			{
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ F I L E);
			}			
		}
	}
	/**
	 *  Restituisce una lista di banner relativi a un punto di ristoro.
	 *  Utilizza il metodo {@link  D B Banner.ottieni Banner}
	 * 
	 * @param p Punto Di Ristoro I D  I D del punto di ristoro
	 * @throws  Remote Exception
	 */
	public  Hash Map< Bean Banner, Image Icon> ottieni Banners Da I D(int p Id Punto Di Ristoro)
			throws  Remote Exception{
		/* crea una  Hash Map che conterrà i banner e le immagini associate */
		 Hash Map< Bean Banner, Image Icon> to Return = new  Hash Map< Bean Banner,  Image Icon>();
		
		try
		{
			/*  Ottiene la lista dei banner di un punto di ristoro */
			 Array List< Bean Banner> lista Banner = db Banner.ottieni Banner(p Id Punto Di Ristoro);
			/* per ogni banner valido della lista */ 
			for( Bean Banner banner : lista Banner){
				/* se il banner è valido lo carica nella  Hash Map insieme al file immagine */
				if( Controllo Dati.check Bean Banner(banner)){
					/* crea il file dell'immagine */
					 File file Immagine = new  File(banner.get Percorso File());
					/* crea un oggetto  Image Icon dal file immagine */
					 Image Icon icon = new  Image Icon( Image I O.read(file Immagine));
					/* aggiunge il banner e l'immagine all' Hash Map */
					to Return.put(banner, icon);
				}
			}
			return to Return;			
		}
		catch ( S Q L Exception e){
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
		catch ( I O Exception e){
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F I L E);
		}
		catch ( Exception e){
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
	}	
	/**
	 *  Crea e inserisce un nuovo banner, controllando che il num. massimo
	 * dei banner visualizzabili per un punto di ristoro non sia 
	 * stato già raggiunto, in questo caso lancia un'eccezione al metodo chiamante.
	 *  
	 * @param p I D Punto Di Ristoro  Id del punto di ristoro
	 * @param p Immagine Banner oggetto  Image Icon contenente l'immagine del banner
	 * @return	 Restituisce true se l'inserimento è andato a buon fine.
	 * @exception  Remote Exception
	 */
	public boolean inserisci Banner(int p Id Punto Di Ristoro,  Image Icon p Immagine Banner) 
		throws  Remote Exception
	{
		
		try
		{
			/* effettua un controllo sull'immagine */
			if(! Controllo Dati.check Immagine(p Immagine Banner)){
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
			}
			/* crea un oggetto che gestisce le convenzioni */
			 I D B Convenzione db Convenzione = new  D B Convenzione();
			/* carica i dati della convenzione di un punto di ristoro */
			 Bean Convenzione convenzione = db Convenzione.ottieni Convezione Attiva(p Id Punto Di Ristoro);
			/* estrae il numero masssimo di banner visualizzabili dalla convenzione */
			int max Banner = convenzione.get Max Banner();
			/* carica la lista dei banner di un punto di ristoro e ne memorizza il numero*/
			int num Banner = (db Banner.ottieni Banner(p Id Punto Di Ristoro)).size();
			/* controlla che il numero massimo di banner non sia stato raggiunto */
			if(!(num Banner < max Banner))
			{
				throw new  Exception( Messaggi Errore. E R R O R E_ N U M_ B A N N E R);
			}
			/* crea un banner vuoto */
			 Bean Banner banner = new  Bean Banner();
			/* crea un nome di file univoco */
			 String path =  Costanti Globali. S E R V E R_ I M A G E_ P A T H + p Id Punto Di Ristoro;
			int i =  ;
			 File file Img = new  File(path + "_" + i + ".jpg");
			while(file Img.exists()){
				i++;
				file Img = new  File(path + "_" + i + ".jpg");
			}
			/* memorizza l'immagine nel file system */
			 Buffered Image im = ( Buffered Image) p Immagine Banner.get Image();
			if(! Image I O.write(im, "jpg", file Img)){
				/* scrittura fallita */
				throw new  I O Exception();
			}
			/* carica i dati nel banner */
			banner.set Id Punto Di Ristoro(p Id Punto Di Ristoro);
			banner.set Percorso File(file Img.get Path());
			/* inserisce il banner nel database */
			return (db Banner.inserisci Banner(banner));
		}
		catch( S Q L Exception e)
		{
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ C O N N E S S I O N E_ D B M S);
		}
		catch( I O Exception e)
		{
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F I L E);
		}
		catch( Exception e)
		{
			if(e.get Message().equals( Messaggi Errore. E R R O R E_ N U M_ B A N N E R))
			{
				/* è stato raggiunto il num massimo di banner inseribili */
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ N U M_ B A N N E R);
			}else
			{
				throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
			}
			
		}
		
	}

}

	
