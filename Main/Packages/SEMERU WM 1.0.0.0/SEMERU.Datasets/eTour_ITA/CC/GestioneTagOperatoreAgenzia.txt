package unisa.gps.etour.control. Gestione Tag;

import java.rmi. Remote Exception;
import java.sql. S Q L Exception;
import unisa.gps.etour.bean. Bean Tag;
import unisa.gps.etour.util. Messaggi Errore;

/**
 *  Classe che implementa i metodi per le funzionalit� dell' Operatore  Agenzia
 * estendendo la classe di  Gestione  Tag  Comune
 * 
 * @author  Morelli  Giuseppe
 * @version  .  �      e Tour  Project -  Copyright by  S E@ S A  Lab  D M I �  University
 *          of  Salerno
 */
public class  Gestione Tag Operatore Agenzia extends  Gestione Tag Comune implements
		 I Gestione Tag Operatore Agenzia
{

	private static final long serial Version U I D =   L;

	public  Gestione Tag Operatore Agenzia() throws  Remote Exception
	{
		//  Richiama il costruttore della superclasse per la comunicazione col
		//  Database
		super();
	}

	//  Metodo che cancella dal  Database il tag il cui identificativo è passato
	// come parametro
	public boolean cancella Tag(int p Tag I D) throws  Remote Exception
	{
		//  Controllo la valisità dei dati passati
		if ((p Tag I D <=  ))
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		try
		{
			//  Effettuo l'operazione sul database
			tag.cancella Tag(p Tag I D);
			return true;
		}
		//  Eccezione nell'esecuzione delle operazioni sul  Database
		catch ( S Q L Exception e)
		{
			 System.out
					.println(" Errore nel metodo cancella Tag: " + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo cancella Tag: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
	}

	//  Metodo che permette l'inserimento di un nuovo  Tag passato come parametro
	public boolean inserisci Tag( Bean Tag p Tag Nuovo) throws  Remote Exception
	{
		//  Controllo la validità del  Bean e dei dati contenuti al suo interno
		if (p Tag Nuovo == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		if ((p Tag Nuovo = check Tag(p Tag Nuovo)) == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		try
		{
			//  Esecuzione dell'operazione sul  Database
			tag.inserisci Tag(p Tag Nuovo);
			return true;
		}
		//  Eccezione nell'esecuzione dell' Operazione sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo inserisci Tag: "
					+ e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo inserisci Tag: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
	}

	//  Metodo che permette la modifica di un  Tag che è quello passato come
	// parametro
	public boolean modifica Tag( Bean Tag p Tag Modificato) throws  Remote Exception
	{
		//  Controllo la validità dei dati
		if ((p Tag Modificato = check Tag(p Tag Modificato)) == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		try
		{
			//  Esecuzione dell'operazione sul  Database
			tag.modifica Tag(p Tag Modificato);
			return true;
		}
		//  Eccezione nell'esecuzione dell'operazione sul  Database
		catch ( S Q L Exception e)
		{
			 System.out
					.println(" Errore nel metodo modifica Tag: " + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out.println(" Errore nel metodo modifica Tag: "
					+ ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
	}

	//  Metodo che permette di ottenere il  Tag il cui identificativo è passato
	// come parametro
	public  Bean Tag ottieni Tag(int p Tag I D) throws  Remote Exception
	{
		//  Controllo la validità dei dati
		if (p Tag I D <=  )
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D A T I);
		//  Bean da ritornare
		 Bean Tag to Return;
		try
		{
			//  Esecuzione dell'operazione sul  Database
			to Return = tag.ottieni Tag(p Tag I D);
		}
		//  Eccezione nell'esecuzione dell' Operazione sul  Database
		catch ( S Q L Exception e)
		{
			 System.out.println(" Errore nel metodo ottieni Tag: " + e.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ D B M S);
		}
		//  Eccezioni impreviste causate da altri fattori
		catch ( Exception ee)
		{
			 System.out
					.println(" Errore nel metodo ottieni Tag: " + ee.to String());
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ S C O N O S C I U T O);
		}
		if (to Return == null)
			throw new  Remote Exception( Messaggi Errore. E R R O R E_ F O R M A T O_ B E A N);
		return to Return;
	}

	//  Metodo che controlla tutti gli attributi di un  Bean Tag
	private  Bean Tag check Tag( Bean Tag to Control)
	{
		//  Controllo dell' I D
		if (to Control.get Id() <=  )
			return null;
		//  Controllo la descrizione
		if (to Control.get Descrizione().equals(""))
			to Control.set Descrizione("***");
		//  Controllo il nome
		if (to Control.get Nome().equals(""))
			return null;
		//  Controllo che il nome non contenga uno spazio
		if (to Control.get Nome().contains(" "))
			return null;
		return to Control;
	}
}
