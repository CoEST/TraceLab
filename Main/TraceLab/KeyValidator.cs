// TraceLab - Software Traceability Instrument to Facilitate and Empower Traceability Research
// Copyright (C) 2012-2013 CoEST - National Science Foundation MRI-R2 Grant # CNS: 0959924
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see<http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;

namespace TraceLab
{
    /// <summary>
    /// Key validator performs validation of the key file in the user base directory.
    /// </summary>
    class KeyValidator
    {
        /// <summary>
        /// Validates the key in file tracelabkey file located in the given user base directory.
        /// The validation performs following steps:
        /// 1. Read name and key from the tracelab key file located in the given directory.
        /// 2. Hashes name with MD5.
        /// 3. Decoded key from base64 format.
        /// 4. Perform xor on the hashed name and decoded key.
        /// 5. The xor result compares with TraceLab Token.
        /// </summary>
        /// <param name="userBaseDirectory">The user base directory in which key file should exist.</param>
        /// <returns>User Name read from the key file, if validation passed</returns>
        /// <exception cref="T:TraceLab.InvalidKeyException">Throws exception if key could not be read or key is not valid.</exception>
        internal static string ValidateKey(string userBaseDirectory)
        {
            string keyFile = String.Empty;
            string name, key, userToken;
            try
            {
                keyFile = System.IO.Path.Combine(userBaseDirectory, KEY_FILENAME);
                ReadKeyFile(keyFile, out name, out key);
                userToken = DecodeUserToken(name, key);
            }
            catch (Exception ex)
            {
                string errorMessage = String.Format("Tracelab failed to read key from '{0}'.\n\n{1}\n\n{2}", keyFile, ex.Message, c_errorMessagePostfix);
                throw new InvalidKeyException(errorMessage);
            }

            if (userToken.Equals(TRACELAB_TOKEN) == false)
            {
                string errorMessage = String.Format("TraceLab token does not match the key read from the file '{0}'\n\n{1}", keyFile, c_errorMessagePostfix);
                throw new InvalidKeyException(errorMessage);
            }

            return name;
        }

        /// <summary>
        /// 32 characters representing TraceLab Token. This is expected output of the xor of hashed user name with key value read from key file.
        /// Must be 32 characters to match length of MD5 hash. (so the key generated by php script is also 32 long)
        /// </summary>
        private const string TRACELAB_TOKEN = "tracelab15July1410TannenbergWaka";

        /// <summary>
        /// The key filename that TraceLab attempts to read. It should be located in user base directory.
        /// </summary>
        private const string KEY_FILENAME = "tracelabkey.txt";

        private const string c_errorMessagePostfix = "TraceLab cannot be started without correct key file.\n\n" +
                                                     "Please register at coest.org and generate the key in TraceLab download page.";

        /// <summary>
        /// Method reads the given file and outputs the name and key.
        /// </summary>
        /// <param name="keyFile">The key file.</param>
        /// <param name="name">The name read from the file.</param>
        /// <param name="key">The key read from the file.</param>
        private static void ReadKeyFile(string keyFile, out string name, out string key)
        {
            string[] lines = System.IO.File.ReadAllLines(keyFile);
                
            if (lines.Length != 2)
            {
                string errorMessage = String.Format("TraceLab key file is not in correct format or is corrupted.\n\n{0}", c_errorMessagePostfix);
                throw new ArgumentException(errorMessage);
            }

            name = lines[0];
            key = lines[1];
        }

        /// <summary>
        /// Decodes the user token from the given name and key.
        /// </summary>
        /// <param name="name">The name.</param>
        /// <param name="key">The key.</param>
        /// <returns></returns>
        private static string DecodeUserToken(string name, string key)
        {
            //get MD5 hash of name
            string nameMD5 = GetMd5Hash(name);

            //xor name name hash and key
            string finalToken = XorNameAndKey(nameMD5, key);

            return finalToken;
        }

        /// <summary>
        /// Xors the name and key.
        /// </summary>
        /// <param name="key">The key.</param>
        /// <param name="nameHash">The name hash.</param>
        /// <returns>Final token</returns>
        private static string XorNameAndKey(string nameHash, string key)
        {
            byte[] nameBytes = Encoding.ASCII.GetBytes(nameHash);
            byte[] keyBytes = System.Convert.FromBase64String(key);
            byte[] result = XOR(nameBytes, keyBytes);

            string finalToken = Encoding.ASCII.GetString(result);

            return finalToken;
        }

        /// <summary>
        /// Performs XOR operation on each two corresponging bytes in two given buffers.
        /// </summary>
        /// <param name="buffer1">The buffer1.</param>
        /// <param name="buffer2">The buffer2.</param>
        /// <returns>The byte array of xored values from two buffers</returns>
        private static byte[] XOR(byte[] buffer1, byte[] buffer2)
        {
            if (buffer1.Length != buffer2.Length)
            {
                throw new ArgumentException("Operation cannot be performed on two uneven buffers.");
            }

            byte[] resultBuffer = new byte[buffer1.Length];

            for (int i = 0; i < buffer1.Length; i++)
            {
                resultBuffer[i] = (byte)(buffer1[i] ^ buffer2[i]);
            }

            return resultBuffer;
        }

        /// <summary>
        /// Gets the MD5 hash of the given input
        /// </summary>
        /// <param name="input">The input.</param>
        /// <returns>MD5 Hash of the given input</returns>
        private static string GetMd5Hash(string input)
        {
            using (MD5 md5Hash = MD5.Create())
            {
                // Convert the input string to a byte array and compute the hash. 
                byte[] data = md5Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

                // Create a new Stringbuilder to collect the bytes 
                // and create a string.
                StringBuilder sBuilder = new StringBuilder();

                // Loop through each byte of the hashed data  
                // and format each one as a hexadecimal string. 
                for (int i = 0; i < data.Length; i++)
                {
                    sBuilder.Append(data[i].ToString("x2"));
                }

                // Return the hexadecimal string. 
                return sBuilder.ToString();
            }
        }
    }
}
