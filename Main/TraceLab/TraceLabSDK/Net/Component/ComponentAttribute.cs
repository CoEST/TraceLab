// TraceLab - Software Traceability Instrument to Facilitate and Empower Traceability Research
// Copyright (C) 2012-2013 CoEST - National Science Foundation MRI-R2 Grant # CNS: 0959924
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see<http://www.gnu.org/licenses/>.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace TraceLabSDK
{
    /// <summary>
    /// Used to define required metadata about a component.
    /// </summary>
    [Serializable]
    [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)]
    public class ComponentAttribute : Attribute
    {
        /// <summary>
        /// No default constructor, but explicitly provided for serialization purposes.
        /// It is public to be exposed also for Java. Only then attribute become visible in java as annotation.
        /// </summary>
        public ComponentAttribute()
        {
        }

        /// <summary>
        /// Attribute used to declare a Component and define metadata about it.
        /// The components unique guid is autogenerated by TraceLab based on it's name, version, configType, and iospec.
        /// Changes to any of these parameters will cause the component to change its guid, which essentially means it's a new component.
        /// </summary>
        /// <param name="name">The name of the component. Used for guid generation. Note, that name will be used as the default label initially when the component is a part of an experiment, unless default label is specified.</param>
        /// <param name="description">A description of this component and what it does.</param>
        /// <param name="author">Who wrote this component</param>
        /// <param name="version">What version this component is.  Typical formats are: X.YY, or X.YY.ZZ</param>
        /// <param name="configType">The type of object that is use for user-configuration of this type</param>
        public ComponentAttribute(string name, string description, string author, string version, Type configType)
        {
            Name = name ?? string.Empty;
            Description = description ?? string.Empty;
            Author = author ?? string.Empty;
            Version = version ?? string.Empty;
            ConfigurationType = configType ?? default(Type);
            DefaultLabel = Name;
        }

        /// <summary>
        /// Attribute used to declare a Component and define metadata about it.
        /// The components unique guid is autogenerated by TraceLab based on it's name, version, configType, and iospec.
        /// Changes to any of these parameters will cause the component to change its guid, which essentially means it's a new component.
        /// </summary>
        /// <param name="name">The name of the component. Used for guid generation.</param>
        /// <param name="description">A description of this component and what it does.</param>
        /// <param name="author">Who wrote this component</param>
        /// <param name="version">What version this component is.  Typical formats are: X.YY, or X.YY.ZZ</param>
        /// <param name="configType">The type of object that is use for user-configuration of this type</param>
        /// <param name="defaultLabel">(optional) The default label will be used as the default label initially when the component is a part of an experiment. Does not effect guid, when changed</param>
        public ComponentAttribute(string name, string description, string author, string version, Type configType, string defaultLabel)
        {
            Name = name ?? string.Empty;
            Description = description ?? string.Empty;
            Author = author ?? string.Empty;
            Version = version ?? string.Empty;
            ConfigurationType = configType ?? default(Type);
            DefaultLabel = defaultLabel ?? Name;
        }

        /// <summary>
        /// Attribute used to declare a Component and define metadata about it
        /// </summary>
        /// <param name="guid">
        ///    A string that contains a GUID in one of the following formats ("d" represents
        ///    a hexadecimal digit whose case is ignored): 32 contiguous digits: dddddddddddddddddddddddddddddddd
        ///    -or- Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups.
        ///    The entire GUID can optionally be enclosed in matching braces or parentheses:
        ///    dddddddd-dddd-dddd-dddd-dddddddddddd -or- {dddddddd-dddd-dddd-dddd-dddddddddddd}
        ///    -or- (dddddddd-dddd-dddd-dddd-dddddddddddd) -or- Groups of 8, 4, and 4 digits,
        ///    and a subset of eight groups of 2 digits, with each group prefixed by "0x"
        ///    or "0X", and separated by commas. The entire GUID, as well as the subset,
        ///    is enclosed in matching braces: {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}
        ///    All braces, commas, and "0x" prefixes are required. All embedded spaces are
        ///    ignored. All leading zeros in a group are ignored.The digits shown in a group
        ///    are the maximum number of meaningful digits that can appear in that group.
        ///    You can specify from 1 to the number of digits shown for a group. The specified
        ///    digits are assumed to be the low-order digits of the group.
        /// </param>
        /// <param name="name">The friendly name of the component.  This will be used as the default label when the component is a part of an experiment.</param>
        /// <param name="description">A description of this component and what it does.</param>
        /// <param name="author">Who wrote this component</param>
        /// <param name="version">What version this component is.  Typical formats are: X.YY, or X.YY.ZZ</param>
        /// <param name="configType">The type of object that is use for user-configuration of this type</param>
        [Obsolete("Retained for backwards compability with old experiments that may refer to components by their old guids. " +
                  "Use the constructor without guid argument for new components." +
                  "TraceLab can auto-generate guids for component based on its name, version, IO Specification and Configuration. " +
                  "Any changes to any of those four parameters will cause new component to have a new guid, thus essentially it is a new component.")]
        public ComponentAttribute(string guid, string name, string description, string author, string version, Type configType) :
            this(guid, name, name, description, author, version, configType)
        {
        }

        /// <summary>
        /// Attribute used to declare a Component and define metadata about it
        /// </summary>
        /// <param name="guid">
        ///    A string that contains a GUID in one of the following formats ("d" represents
        ///    a hexadecimal digit whose case is ignored): 32 contiguous digits: dddddddddddddddddddddddddddddddd
        ///    -or- Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups.
        ///    The entire GUID can optionally be enclosed in matching braces or parentheses:
        ///    dddddddd-dddd-dddd-dddd-dddddddddddd -or- {dddddddd-dddd-dddd-dddd-dddddddddddd}
        ///    -or- (dddddddd-dddd-dddd-dddd-dddddddddddd) -or- Groups of 8, 4, and 4 digits,
        ///    and a subset of eight groups of 2 digits, with each group prefixed by "0x"
        ///    or "0X", and separated by commas. The entire GUID, as well as the subset,
        ///    is enclosed in matching braces: {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}
        ///    All braces, commas, and "0x" prefixes are required. All embedded spaces are
        ///    ignored. All leading zeros in a group are ignored.The digits shown in a group
        ///    are the maximum number of meaningful digits that can appear in that group.
        ///    You can specify from 1 to the number of digits shown for a group. The specified
        ///    digits are assumed to be the low-order digits of the group.
        /// </param>
        /// <param name="name">The friendly name of the component</param>
        /// <param name="defaultLabel">The default label to use when this component is part of an experiment.</param>
        /// <param name="description">A description of this component and what it does.</param>
        /// <param name="author">Who wrote this component</param>
        /// <param name="version">What version this component is.  Typical formats are: X.YY, or X.YY.ZZ</param>
        /// <param name="configType">The type of object that is use for user-configuration of this type</param>
        [Obsolete("Retained for backwards compability with old experiments that may refer to components by their old guids. " +
                  "Use the constructor without guid argument for new components." +
                  "TraceLab can auto-generate guids for component based on its name, version, IO Specification and Configuration. " +
                  "Any changes to any of those four parameters will cause new component to have a new guid, thus essentially it is a new component.")]
        public ComponentAttribute(string guid, string name, string defaultLabel, string description, string author, string version, Type configType)
        {
            GuidID = string.IsNullOrEmpty(guid) ? Guid.NewGuid() : new Guid(guid);
            GuidIDString = guid;
            Name = name ?? string.Empty;
            DefaultLabel = defaultLabel ?? string.Empty;
            Description = description ?? string.Empty;
            Author = author ?? string.Empty;
            Version = version ?? string.Empty;
            ConfigurationType = configType ?? default(Type);
        }

        /// <summary>
        /// Gets the GUID of this Component.
        /// </summary>
        [System.Xml.Serialization.XmlIgnore]
        [Obsolete("Retained for backwards compability with old experiments. TraceLab can auto-generate guids for components.")]
        public Guid GuidID
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a value indicating whether this instance is representing a Java component.
        /// </summary>
        /// <value>
        ///   <c>true</c> if this instance is java; otherwise, <c>false</c>.
        /// </value>
        public virtual bool IsJava
        {
            get { return false; }
        }

        private string m_guidIdString;
        /// <summary>
        /// Gets or sets the GUID of this component as a string.
        /// </summary>
        /// <value>
        /// The GUID string.
        /// </value>
        [Obsolete("Retained for backwards compability with old experiments. " +
                  "TraceLab can auto-generate guids for component based on its name, version, IO Specification and Configuration. " +
                  "Any changes to any of those four parameters will cause new component to have a new guid, thus essentially it is a new component.")]
        public string GuidIDString
        {
            get
            {
                return m_guidIdString;
            }
            set
            {
                GuidID = string.IsNullOrEmpty(value) ? Guid.NewGuid() : new Guid(value);
                m_guidIdString = value;
            }
        }

        /// <summary>
        /// Gets or sets the name of the component. Participates in guid generation. If default label has not been provided it is used as default label.
        /// </summary>
        /// <value>
        /// The name.
        /// </value>
        public string Name
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the default label of the component. Default label is optional - if not set, the name is assign to the default label.
        /// The components is displayed by label in the components library, and it is default label of component when user adds
        /// the component to experiment. The changes to the label does not effect the guid, and that's the main difference to the component name.
        /// </summary>
        /// <value>
        /// The default label.
        /// </value>
        public string DefaultLabel
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the description of the component.
        /// </summary>
        /// <value>
        /// The description.
        /// </value>
        public string Description
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the author of the component.
        /// </summary>
        /// <value>
        /// The author.
        /// </value>
        public string Author
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the version of the component.
        /// </summary>
        /// <value>
        /// The version.
        /// </value>
        public string Version
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets the type of the configuration object that is used for this component.
        /// </summary>
        /// <value>
        /// The type of the configuration.
        /// </value>
        /// <remarks>
        /// If this is set to a valid object type, then the public properties of that object are used as 
        /// configuration settings for the component.
        /// 
        /// If this is set to null, then no configuration information is set.
        /// 
        /// </remarks>
        public Type ConfigurationType
        {
            get;
            set;
        }
    }
}
