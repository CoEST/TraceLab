<!--
TraceLab - Software Traceability Instrument to Facilitate and Empower Traceability Research
Copyright (C) 2012-2013 CoEST - National Science Foundation MRI-R2 Grant # CNS: 0959924

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see<http://www.gnu.org/licenses/>.
-->
    
<ResourceDictionary
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:Resources="clr-namespace:TraceLab.UI.WPF.Resources" 
             xmlns:GraphSharp_Controls="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls" 
             xmlns:commands="clr-namespace:TraceLab.UI.WPF.Commands" 
             xmlns:NodeControls="clr-namespace:TraceLab.UI.WPF.Views.Nodes"
             xmlns:Controls="clr-namespace:TraceLab.UI.WPF.Controls"
             xmlns:Views="clr-namespace:TraceLab.UI.WPF.Views"
             xmlns:ViewModels="clr-namespace:TraceLab.UI.WPF.ViewModels"
             xmlns:Converters="clr-namespace:TraceLab.UI.WPF.Converters"
             xmlns:ac="clr-namespace:TraceLab.UI.WPF.Controls.AdornedControl"
             xmlns:controls="clr-namespace:TraceLab.UI.WPF.Controls"
             mc:Ignorable="d" >

    <DataTemplate DataType="{x:Type ViewModels:TopLevelEditableExperimentViewModel}" x:Key="scopeDataTemplate">
        <DockPanel>
            <Views:ScopeGraph x:Name="scopeGraph"
                                AllowDrop="True"
                                DropCommand="{Binding Path=Drop}"
                                DragOverCommand="{Binding Path=DragOver}"
                                RemoveNodeCommand="{Binding Path=RemoveNode}"
                                RemoveSelectedNodesCommand="{Binding Path=RemoveSelectedNodes}"
                                ToogleLogLevelCommand="{Binding Path=ToogleLogLevel}">
                <Views:ScopeGraph.Resources>
                    <ResourceDictionary>
                        <ResourceDictionary.MergedDictionaries>
                            <ResourceDictionary Source="pack://application:,,,/TraceLab.UI.WPF;component/Views/Nodes/NodeResources.xaml"/>
                            <ResourceDictionary Source="pack://application:,,,/TraceLab.UI.WPF;component/Views/Nodes/EnterLoopScopeNodeControl.xaml"/>
                            <ResourceDictionary Source="pack://application:,,,/TraceLab.UI.WPF;component/Views/Nodes/ExitLoopScopeNodeControl.xaml"/>
                            <ResourceDictionary Source="pack://application:,,,/TraceLab.UI.WPF;component/Controls/ZoomControl/ScopeZoomStyle.xaml"/>
                        </ResourceDictionary.MergedDictionaries>

                        <DataTemplate DataType="{x:Type GraphSharp_Controls:VertexControl}" x:Key="StartNodeControl">
                            <NodeControls:EnterLoopScopeNodeControl DisplayLinkCreationButton="True" IsAnyAllButtonEnabled="False" />
                        </DataTemplate>

                        <DataTemplate DataType="{x:Type GraphSharp_Controls:VertexControl}" x:Key="EndNodeControl">
                            <NodeControls:ExitLoopScopeNodeControl IsAnyAllButtonEnabled="True" />
                        </DataTemplate>
                    </ResourceDictionary>
                </Views:ScopeGraph.Resources>
            </Views:ScopeGraph>
        </DockPanel>
    </DataTemplate>

    <Style x:Key="rectangleColor" TargetType="Rectangle">
        <Setter Property="Stroke" Value="Gainsboro" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Vertex.IsSelected}" Value="True">
                <Setter Property="Stroke" Value="LightSteelBlue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="NodeControls:LoopScopeNodeControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="NodeControls:LoopScopeNodeControl">
                    <!-- note that the scope border wraps AdornerDecorator and not the other way around. If it is the other way around the resizing of the scope does not work -->
                    <Border x:Name="PART_NodeControl" BorderThickness="2,2,2,2"
                                     CornerRadius="24" Background="White" Opacity=".9"
                                     MinHeight="24" MinWidth="120" Width="{Binding Vertex.Data.Width, Mode=TwoWay}" Height="{Binding Vertex.Data.Height, Mode=TwoWay}" >
                        <Border.BorderBrush>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <!-- Dashed border -->
                                    <Rectangle Style="{StaticResource rectangleColor}"
                                                StrokeDashArray="1.0 0.5"
                                                StrokeThickness="{Binding ElementName=PART_NodeControl, Path=BorderThickness, Converter={Converters:ThicknessMaxConverter}}"
                                                RadiusX="{Binding ElementName=PART_NodeControl, Path=CornerRadius.TopRight}"
                                                RadiusY="{Binding ElementName=PART_NodeControl, Path=CornerRadius.BottomLeft}"
                                                Width="{Binding ElementName=PART_NodeControl, Path=ActualWidth}"
                                                Height="{Binding ElementName=PART_NodeControl, Path=ActualHeight}">
                                    </Rectangle>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.BorderBrush>
                        
                        <AdornerDecorator>
                            <ac:AdornedControl HorizontalAdornerPlacement="Outside" VerticalAdornerPlacement="Outside" IsAdornerVisible="True">

                                <!-- component node control buttons - this is the adorner -->
                                <ac:AdornedControl.AdornerContent>
                                    <Grid x:Name="PART_VertexControlButtonsGrid" HorizontalAlignment="Right" Margin="5,8,0,0">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="16" />
                                            <RowDefinition Height="16" />
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="16" />
                                            <ColumnDefinition Width="16" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Create Connection Button -->
                                        <WrapPanel Grid.Row="0" Grid.Column="0" 
                                                    Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type NodeControls:LoopScopeNodeControl}}, 
                                                                        Path=DisplayLinkCreationButton, Mode=OneTime, Converter={Converters:BoolToVisibilityConverter}}">
                                            <Button x:Name="PART_CreateConnectionButton" Style="{DynamicResource IconButton}" Opacity="0">
                                                <Button.InputBindings>
                                                    <MouseBinding MouseAction="LeftClick" 
                                                                        Command="{x:Static commands:RoutedCommands.CreateConnectionCommand}"
                                                                        CommandParameter="{Binding Path=.}" />
                                                </Button.InputBindings>
                                                <Image Height="16" Width="16" Source="/TraceLab.UI.WPF;component/Resources/arrow.png" Style="{DynamicResource IconButtonImage}"/>
                                            </Button>
                                        </WrapPanel>

                                        <!-- Preview Remove Node Button -->
                                        <WrapPanel Grid.Row="0" Grid.Column="1"
                                                    Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type NodeControls:LoopScopeNodeControl}}, 
                                                                        Path=DisplayRemoveNodeButton, Mode=OneTime, Converter={Converters:BoolToVisibilityConverter}}">
                                            <Button x:Name="PART_RemoveNodeButtonPreview" Style="{DynamicResource IconButton}"
                                                Opacity="0" Visibility="Visible">
                                                <Image Height="16" Width="16" Source="/TraceLab.UI.WPF;component/Resources/trashBin.png" Style="{DynamicResource IconButtonImage}"/>
                                            </Button>

                                            <!-- Actual Remove Node Button (at first it is collapsed until Preview button is clicked) -->
                                            <Button x:Name="PART_RemoveNodeButton" Style="{DynamicResource RemoveIconButton}"
                                                Command="{x:Static commands:RoutedCommands.RemoveNodeCommand}" 
                                                CommandParameter="{Binding Path=Vertex}"
                                                Visibility="Collapsed">
                                                <Image Height="16" Width="16" Source="/TraceLab.UI.WPF;component/Resources/trashBin.png" Style="{DynamicResource IconButtonImage}"/>
                                            </Button>
                                        </WrapPanel>

                                        <!-- Info Button -->
                                        <WrapPanel Grid.Row="1" Grid.Column="0" 
                                                    Visibility="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type NodeControls:LoopScopeNodeControl}}, 
                                                                        Path=DisplayToogleInfoButton, Mode=OneTime, Converter={Converters:BoolToVisibilityConverter}}">
                                            <ToggleButton x:Name="PART_ToogleInfoButton" Style="{DynamicResource IconButton}"
                                                            Command="{x:Static commands:RoutedCommands.ToggleNodeInfoCommand}"
                                                            CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type GraphSharp_Controls:VertexControl}}}"
                                                            IsChecked="{Binding Vertex.IsInfoPaneExpanded, Mode=OneWay}">
                                                <Image x:Name="PART_ToogleInfoButtonImage" Height="16" Width="16" Source="/TraceLab.UI.WPF;component/Resources/info.png" Style="{DynamicResource IconButtonImage}"/>
                                            </ToggleButton>
                                        </WrapPanel>

                                    </Grid>
                                </ac:AdornedControl.AdornerContent>

                                <!-- This the actual control that is being adorned -->
                                <DockPanel>
                                    <Border x:Name="labelBorder" BorderThickness="0,0,0,1" Height="23" CornerRadius="26,26,0,0" Background="White" BorderBrush="Gainsboro" DockPanel.Dock="Top">
                                        <DockPanel>

                                            <Image DockPanel.Dock="Right" Name="PART_MoveIcon" Width="15" Height="16" HorizontalAlignment="Right" 
                                                  Source="/TraceLab.UI.WPF;component/Resources/moveIcon.png" OpacityMask="{x:Null}" Margin="0,2,12,0">
                                                <Image.Effect>
                                                    <Resources:ColorToneEffect DarkColor="#ffb0b0b0" Toned="1.0" /><!-- gray color -->
                                                </Image.Effect>
                                            </Image>
                                            
                                            <Controls:EditableTextBlock Background="Transparent" Foreground="Black"
                                                                Text="{Binding Vertex.Data.Metadata.Label, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                IsEditable="{Binding Vertex.IsSelected}" DelayEditableChange="True"
                                                                VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                                                Margin="22,0,0,0" />
                                        </DockPanel>
                                    </Border>

                                    <ContentPresenter ContentTemplate="{StaticResource scopeDataTemplate}"
                                        Content="{Binding Vertex.Data.Metadata.ComponentGraph, Converter={Converters:ComponentGraphToExperimentViewModelConverter}}" />

                                    <DockPanel.Clip>
                                        <!-- Additionaly clip the panel to the top rounded border. Note, that the border is fully visible because scope zoom style is transparent, 
                                         while the rounder border background is white. The clipping is only minor adjustment -->
                                        <RectangleGeometry RadiusX="{Binding ElementName=PART_NodeControl, Path=CornerRadius.TopRight}"
                                                            RadiusY="{Binding ElementName=PART_NodeControl, Path=CornerRadius.BottomLeft}">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding Converter="{Converters:RectConverter}">
                                                    <Binding ElementName="PART_NodeControl" Path="Width"/>
                                                    <Binding ElementName="PART_NodeControl" Path="Height"/>
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </DockPanel.Clip>
                                    
                                </DockPanel>

                            </ac:AdornedControl>
                        </AdornerDecorator>

                    </Border>
                    
                    <!-- Visibility triggers for all adorners buttons -->
                    <ControlTemplate.Triggers>

                        <!-- Trigger when mouse over the control to show adorner buttons and anyallbutton -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" SourceName="PART_NodeControl" Value="False"/>
                                <Condition Property="Grid.IsMouseOver" SourceName="PART_VertexControlButtonsGrid" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Reset state of buttons: shows Preview Remove Button and collapses Actual Remove Button  -->
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_RemoveNodeButton" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_RemoveNodeButtonPreview" Storyboard.TargetProperty="(UIElement.Visibility)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>

                                        <!-- Hide adorner buttons -->
                                        <DoubleAnimation Storyboard.TargetName="PART_RemoveNodeButtonPreview"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="0" Duration="0:0:0.1"/>
                                        <DoubleAnimation Storyboard.TargetName="PART_CreateConnectionButton"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="0" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!-- Show adorner buttons -->
                                        <DoubleAnimation Storyboard.TargetName="PART_RemoveNodeButtonPreview"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="1" Duration="0:0:0.1"/>
                                        <DoubleAnimation Storyboard.TargetName="PART_CreateConnectionButton"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="1" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>

                        <!-- Triggers for toogle info button (it is seperate, as it has one additional condition that checks if info pane is expanded) -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_NodeControl, Path=IsMouseOver}" Value="False" />
                                <Condition Binding="{Binding ElementName=PART_VertexControlButtonsGrid, Path=IsMouseOver}" Value="False" />
                                <Condition Binding="{Binding Vertex.IsInfoPaneExpanded}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_ToogleInfoButton"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="0" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.EnterActions>
                            <MultiDataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_ToogleInfoButton"
                                                     Storyboard.TargetProperty="(FrameworkElement.Opacity)"
                                                     To="1" Duration="0:0:0.1"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiDataTrigger.ExitActions>
                        </MultiDataTrigger>

                        <!-- Data trigger that makes the ToogleInfoButton blue if info pane is expanded -->
                        <DataTrigger Binding="{Binding Vertex.IsInfoPaneExpanded}" Value="True">
                            <Setter Property="Effect" TargetName="PART_ToogleInfoButton">
                                <Setter.Value>
                                    <Resources:ColorToneEffect DarkColor="Blue" Toned="1.0" />
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Effect" TargetName="PART_ToogleInfoButtonImage">
                                <Setter.Value>
                                    <DropShadowEffect Color="Blue" Direction="225" ShadowDepth="4" BlurRadius="5" Opacity="0.6" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <!-- When trash preview button is clicked, it hides itself and shows confirmation remove button -->
                        <EventTrigger RoutedEvent="Button.Click" SourceName="PART_RemoveNodeButtonPreview">
                            <BeginStoryboard Name="DisplayConfirmationRemoveNodeButton">
                                <Storyboard>
                                    <!-- Collapses Preview Remove Button and shows Actual Remove Button -->
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_RemoveNodeButton" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                    <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="PART_RemoveNodeButtonPreview" Storyboard.TargetProperty="(UIElement.Visibility)">
                                        <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Collapsed}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>

                        <!-- When red trash is displayed (confirmation remove button), and mouse is not over node, stop the storyboard -->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding ElementName=PART_NodeControl, Path=IsMouseOver}" Value="False" />
                                <Condition Binding="{Binding ElementName=PART_VertexControlButtonsGrid, Path=IsMouseOver}" Value="False" />
                                <Condition Binding="{Binding ElementName=PART_RemoveNodeButton, Path=Visibility}" Value="Visible" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.EnterActions>
                                <StopStoryboard BeginStoryboardName="DisplayConfirmationRemoveNodeButton" />
                            </MultiDataTrigger.EnterActions>
                        </MultiDataTrigger>

                        <!-- Move Icon tiny change of color when mouse is over the label -->
                        <DataTrigger Binding="{Binding ElementName=labelBorder, Path=IsMouseOver}" Value="True">
                            <Setter Property="Effect" TargetName="PART_MoveIcon">
                                <Setter.Value>
                                    <Resources:ColorToneEffect DarkColor="CornflowerBlue" Toned="1.0" />
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
