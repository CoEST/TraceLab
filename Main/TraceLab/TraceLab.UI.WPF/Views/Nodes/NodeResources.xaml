<!--
TraceLab - Software Traceability Instrument to Facilitate and Empower Traceability Research
Copyright (C) 2012-2013 CoEST - National Science Foundation MRI-R2 Grant # CNS: 0959924

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see<http://www.gnu.org/licenses/>.
-->

<ResourceDictionary x:Class="TraceLab.UI.WPF.Views.Resources.NodeResources" 
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:GraphSharp_Controls="clr-namespace:GraphSharp.Controls;assembly=GraphSharp.Controls" 
             xmlns:Commands="clr-namespace:TraceLab.UI.WPF.Commands"       
             xmlns:Settings="clr-namespace:TraceLab.Core.Settings;assembly=TraceLab.Core"
             xmlns:Selectors="clr-namespace:TraceLab.UI.WPF.Selectors" 
             xmlns:Resources="clr-namespace:TraceLab.UI.WPF.Resources" 
             xmlns:Controls="clr-namespace:TraceLab.UI.WPF.Controls" 
             xmlns:diagnostics="clr-namespace:System.Diagnostics;assembly=WindowsBase"
             mc:Ignorable="d">
    <!-- Common node resources (referenced by all other NodeResources*.xaml indirectly via VertexControlStyle.xaml or VertexControlStyleReadOnly.xaml -->
    
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/TraceLab.UI.WPF;component/Views/Nodes/NodeColors.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <Selectors:NodeControlSelector x:Key="NodeControlSelector"/>

    <TextBlock x:Key="WaitForAllTooltip" TextWrapping="Wrap" Width="300">
        <Bold>Waits for all predecessors</Bold><LineBreak />
        Component will wait for all predecessors node to complete before starting its execution.<LineBreak />
        If you wish the component to execute as soon as first predecessors finishes change this setting.
    </TextBlock>

    <TextBlock x:Key="WaitForAnyTooltip" TextWrapping="Wrap" Width="300">
        <Bold>Waits for any predecessors</Bold><LineBreak />
        Component will wait for any predecessors node to finish and then starts its execution.<LineBreak />
        If you wish the component to wait for all predecessors before starting its execution change this setting.
    </TextBlock>

    <DataTemplate DataType="{x:Type GraphSharp_Controls:VertexControl}" x:Key="DefaultNodeControl">
        <Border Background="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GraphSharp_Controls:VertexControl}}}" 
                            BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GraphSharp_Controls:VertexControl}}}" 
                            BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GraphSharp_Controls:VertexControl}}}"
                            CornerRadius="10,10,10,10"
                            Padding="{Binding Padding, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type GraphSharp_Controls:VertexControl}}}">
            <ContentPresenter>
                <ContentPresenter.Content>
                    <TextBlock Text="{Binding Vertex.Data.Metadata.Label}" />
                </ContentPresenter.Content>
            </ContentPresenter>
        </Border>
    </DataTemplate>

    <DataTemplate DataType="{x:Type Settings:LogLevelItem}" x:Key="LogLevelItemMenuTemplate">
        <TextBlock Text="{Binding Level}"/>
    </DataTemplate>

    <Style TargetType="MenuItem" x:Key="LogLevelItemMenuContainerStyle">
        <Setter Property="IsChecked" Value="{Binding IsEnabled}"/>
        <Setter Property="Command" Value="{x:Static Commands:RoutedCommands.ToggleLogLevelCommand}" />
        <Setter Property="CommandTarget" Value="{Binding PlacementTarget, RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
        <Setter Property="CommandParameter" Value="{Binding Path=.}"/>
    </Style>

    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>

    <SolidColorBrush x:Key="ButtonBorder" Color="#FF003C74"/>

    <LinearGradientBrush x:Key="DefaultButtonBackgroundFill" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#FF043F76" Offset="0"/>
        <GradientStop Color="#FF04427C" Offset="1"/>
        <GradientStop Color="#FF5F91C1" Offset="1"/>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DisabledButtonBackgroundFill" StartPoint="0,1" EndPoint="0,0">
        <GradientStop Color="#FF4B4B32" Offset="0"/>
        <GradientStop Color="#FFAFAF96" Offset="1"/>
    </LinearGradientBrush>

    <!-- Style for Any/All buttons (petri nets) -->
    <Style x:Key="AnyAllToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Margin" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <ContentPresenter Content="{TemplateBinding Content}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the adorner icons -->
    <Style x:Key="IconButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <ContentPresenter Content="{TemplateBinding Content}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Effect">
                    <Setter.Value>
                        <Resources:ColorToneEffect DarkColor="LimeGreen" Toned="1.0" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Each adorner icon has the image with a shadow -->
    <Style x:Key="IconButtonImage" TargetType="{x:Type Image}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- Remove button has its own style, as it shows icon with red color -->
    <Style x:Key="RemoveIconButton" TargetType="{x:Type ButtonBase}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <ContentPresenter Content="{TemplateBinding Content}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <Resources:ColorToneEffect DarkColor="Red" Toned="1.0" />
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
